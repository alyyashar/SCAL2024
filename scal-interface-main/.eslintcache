[{"/Users/abubakardev/Desktop/scal/client/src/index.js":"1","/Users/abubakardev/Desktop/scal/client/src/App.js":"2","/Users/abubakardev/Desktop/scal/client/src/reportWebVitals.js":"3","/Users/abubakardev/Desktop/scal/client/src/context/ThemeContext.js":"4","/Users/abubakardev/Desktop/scal/client/src/store/store.js":"5","/Users/abubakardev/Desktop/scal/client/src/context/ThemeDemo.js":"6","/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Registration.js":"7","/Users/abubakardev/Desktop/scal/client/src/jsx/pages/ForgotPassword.js":"8","/Users/abubakardev/Desktop/scal/client/src/jsx/helpers/Auth.js":"9","/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Error404.js":"10","/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Login.js":"11","/Users/abubakardev/Desktop/scal/client/src/store/reducers/PostsReducer.js":"12","/Users/abubakardev/Desktop/scal/client/src/store/reducers/AuthReducer.js":"13","/Users/abubakardev/Desktop/scal/client/src/store/reducers/Reducers.js":"14","/Users/abubakardev/Desktop/scal/client/src/jsx/index.js":"15","/Users/abubakardev/Desktop/scal/client/src/store/actions/AuthActions.js":"16","/Users/abubakardev/Desktop/scal/client/src/store/actions/PostTypes.js":"17","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/Footer.js":"18","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Tools.js":"19","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/About.js":"20","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan.js":"21","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory.js":"22","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Home.js":"23","/Users/abubakardev/Desktop/scal/client/src/jsx/components/AppsMenu/AppProfile/AppProfile.js":"24","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan.js":"25","/Users/abubakardev/Desktop/scal/client/src/services/AuthService.js":"26","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/index.js":"27","/Users/abubakardev/Desktop/scal/client/src/jsx/components/AppsMenu/AppProfile/ChangeProfilePicture.js":"28","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/TestAnalysis.js":"29","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/TestAnalysis.js":"30","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Home/TableData.js":"31","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/TableData.js":"32","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/PasteAnalysis.js":"33","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/ImportAnalysis.js":"34","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/ImportAnalysis.js":"35","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/PasteAnalysis.js":"36","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/Header.js":"37","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/NavHader.js":"38","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/SideBar.js":"39","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/AnalysisResult.js":"40","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/TagRender.js":"41","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/Logout.js":"42","/Users/abubakardev/Desktop/scal/client/src/context/NotificationContext.js":"43","/Users/abubakardev/Desktop/scal/client/src/jsx/pages/ResetPassword.js":"44"},{"size":988,"mtime":1668114214000,"results":"45","hashOfConfig":"46"},{"size":3947,"mtime":1668379659000,"results":"47","hashOfConfig":"46"},{"size":375,"mtime":1661179690000,"results":"48","hashOfConfig":"46"},{"size":9479,"mtime":1668323825000,"results":"49","hashOfConfig":"46"},{"size":705,"mtime":1661179690000,"results":"50","hashOfConfig":"46"},{"size":2363,"mtime":1661179690000,"results":"51","hashOfConfig":"46"},{"size":6942,"mtime":1668413321000,"results":"52","hashOfConfig":"46"},{"size":4014,"mtime":1668413321000,"results":"53","hashOfConfig":"46"},{"size":3320,"mtime":1668113203000,"results":"54","hashOfConfig":"46"},{"size":1212,"mtime":1661179690000,"results":"55","hashOfConfig":"46"},{"size":4910,"mtime":1668413321000,"results":"56","hashOfConfig":"46"},{"size":1666,"mtime":1661179690000,"results":"57","hashOfConfig":"46"},{"size":1799,"mtime":1661179690000,"results":"58","hashOfConfig":"46"},{"size":581,"mtime":1661179690000,"results":"59","hashOfConfig":"46"},{"size":3049,"mtime":1668379668000,"results":"60","hashOfConfig":"46"},{"size":2739,"mtime":1661854038000,"results":"61","hashOfConfig":"46"},{"size":503,"mtime":1661179690000,"results":"62","hashOfConfig":"46"},{"size":440,"mtime":1664910806000,"results":"63","hashOfConfig":"46"},{"size":24577,"mtime":1668357781000,"results":"64","hashOfConfig":"46"},{"size":5019,"mtime":1668326932000,"results":"65","hashOfConfig":"46"},{"size":467,"mtime":1662653397000,"results":"66","hashOfConfig":"46"},{"size":1105,"mtime":1668413321000,"results":"67","hashOfConfig":"46"},{"size":14814,"mtime":1668413321000,"results":"68","hashOfConfig":"46"},{"size":6736,"mtime":1668413321000,"results":"69","hashOfConfig":"46"},{"size":462,"mtime":1664361751000,"results":"70","hashOfConfig":"46"},{"size":2374,"mtime":1668413321000,"results":"71","hashOfConfig":"46"},{"size":730,"mtime":1661179690000,"results":"72","hashOfConfig":"46"},{"size":1090,"mtime":1665886568000,"results":"73","hashOfConfig":"46"},{"size":8226,"mtime":1662654079000,"results":"74","hashOfConfig":"46"},{"size":8142,"mtime":1662653606000,"results":"75","hashOfConfig":"46"},{"size":7935,"mtime":1667816672000,"results":"76","hashOfConfig":"46"},{"size":15340,"mtime":1667816596000,"results":"77","hashOfConfig":"46"},{"size":52393,"mtime":1668413321000,"results":"78","hashOfConfig":"46"},{"size":52910,"mtime":1668413321000,"results":"79","hashOfConfig":"46"},{"size":8229,"mtime":1662653582000,"results":"80","hashOfConfig":"46"},{"size":8253,"mtime":1662653799000,"results":"81","hashOfConfig":"46"},{"size":8653,"mtime":1668413321000,"results":"82","hashOfConfig":"46"},{"size":1196,"mtime":1661868926000,"results":"83","hashOfConfig":"46"},{"size":3593,"mtime":1664701850000,"results":"84","hashOfConfig":"46"},{"size":65867,"mtime":1667902565000,"results":"85","hashOfConfig":"46"},{"size":2975,"mtime":1665744046000,"results":"86","hashOfConfig":"46"},{"size":1199,"mtime":1667473143000,"results":"87","hashOfConfig":"46"},{"size":801,"mtime":1668117599000,"results":"88","hashOfConfig":"46"},{"size":4782,"mtime":1668413321000,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"hkd0n4",{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"92"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abubakardev/Desktop/scal/client/src/index.js",[],["196","197"],"/Users/abubakardev/Desktop/scal/client/src/App.js",["198"],"import { lazy, Suspense, useEffect, useContext } from 'react';\r\n\r\n/// Components\r\nimport Index from \"./jsx\";\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\r\n// action\r\nimport { isAuth } from './jsx/helpers/Auth'\r\n/// Style\r\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport './vendor/datatables/css/dataTables.min.css';\r\nimport \"./css/style.css\";\r\nimport Error404 from \"./jsx/pages/Error404\";\r\nimport { isTheme } from \"./jsx/helpers/Auth\";\r\nimport { ThemeContext } from \"./context/ThemeContext\";\r\n\r\n\r\nconst SignUp = lazy(() => import('./jsx/pages/Registration'));\r\nconst ForgotPassword = lazy(() => import('./jsx/pages/ForgotPassword'));\r\nconst ResetPassword = lazy(() => import('./jsx/pages/ResetPassword'));\r\nconst Login = lazy(() => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => resolve(import('./jsx/pages/Login')), 500);\r\n    });\r\n});\r\n\r\n\r\n\r\nfunction App(props) {\r\n\r\n    const authCheck = sessionStorage.getItem('user');\r\n    let theme = isTheme()\r\n\r\n    const {\r\n        changeBackground, background\r\n      } = useContext(ThemeContext);\r\n    \r\n      useEffect(() => {\r\n        if(theme === null){\r\n            theme = { value: \"light\", label: \"Light\" };\r\n        }\r\n        changeBackground(theme);\r\n        console.log(background)\r\n      }, []);\r\n\r\n    let routes = (\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/dashboard\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/about\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/tools\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/solidity-scan\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/bytecode-scan\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            <Route exact path=\"/app-profile\">\r\n                <Redirect to=\"/login\" />\r\n            </Route>\r\n            \r\n            <Route path='/login' component={Login} />\r\n            <Route path='/users/new/register' component={SignUp} />\r\n            <Route path='/forgot-password' component={ForgotPassword} />    \r\n            <Route path='/users/password/reset/:token' component={ResetPassword} />\r\n           \r\n            <Route path='*' component={Error404} />\r\n        </Switch>\r\n    );\r\n    if (authCheck) {\r\n        return (\r\n            <>\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    <Index />\r\n                </Suspense>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"vh-100\">\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    {routes}\r\n                </Suspense>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: isAuth(state),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(App));\r\n\r\n","/Users/abubakardev/Desktop/scal/client/src/reportWebVitals.js",[],"/Users/abubakardev/Desktop/scal/client/src/context/ThemeContext.js",["199"],"import React, { createContext, useEffect, useState } from \"react\";\r\nimport { dezThemeSet } from './ThemeDemo';\r\n\r\nimport { isTheme } from  \"../jsx/helpers/Auth\"\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n  const theme = isTheme()\r\n  const [sideBarStyle, setSideBarStyle] = useState({ value: \"full\", label: \"Full\", });\r\n  const [sidebarposition, setSidebarposition] = useState({ value: \"fixed\", label: \"Fixed\", });\r\n  const [headerposition, setHeaderposition] = useState({ value: \"fixed\", label: \"Fixed\", });\r\n  const [sidebarLayout, setSidebarLayout] = useState({ value: \"vertical\", label: \"Vertical\", });\r\n  const [direction, setDirection] = useState({ value: \"ltr\", label: \"LTR\" });\r\n  const [primaryColor, setPrimaryColor] = useState(\"color_1\");\r\n  const [navigationHader, setNavigationHader] = useState(\"color_1\");\r\n  const [haderColor, setHaderColor] = useState(\"color_1\");\r\n  const [sidebarColor, setSidebarColor] = useState(\"color_1\");\r\n  const [iconHover, setIconHover] = useState(false);\r\n  const [menuToggle, setMenuToggle] = useState(false);\r\n  const [background, setBackground] = useState({ value: \"light\", label: \"Light\" });\r\n  const [containerPosition_, setcontainerPosition_] = useState({ value: \"wide-boxed\", label: \"Wide Boxed\", });\r\n  const body = document.querySelector(\"body\");\r\n  const [windowWidth, setWindowWidth] = useState(0);\r\n  const [windowHeight, setWindowHeight] = useState(0);\r\n\r\n  // layout\r\n  const layoutOption = [\r\n    { value: \"vertical\", label: \"Vertical\" },\r\n    { value: \"horizontal\", label: \"Horizontal\" },\r\n  ];\r\n  const sideBarOption = [\r\n    { value: \"compact\", label: \"Compact\" },\r\n    { value: \"full\", label: \"Full\" },\r\n    { value: \"mini\", label: \"Mini\" },\r\n    { value: \"modern\", label: \"Modern\" },\r\n    { value: \"overlay\", label: \"Overlay\" },\r\n    { value: \"icon-hover\", label: \"Icon-hover\" },\r\n  ];\r\n  const backgroundOption = [\r\n    { value: \"light\", label: \"Light\" },\r\n    { value: \"dark\", label: \"Dark\" },\r\n  ];\r\n  const sidebarpositions = [\r\n    { value: \"fixed\", label: \"Fixed\" },\r\n    { value: \"static\", label: \"Static\" },\r\n  ];\r\n  const headerPositions = [\r\n    { value: \"fixed\", label: \"Fixed\" },\r\n    { value: \"static\", label: \"Static\" },\r\n  ];\r\n  const containerPosition = [\r\n    { value: \"wide-boxed\", label: \"Wide Boxed\" },\r\n    { value: \"boxed\", label: \"Boxed\" },\r\n    { value: \"wide\", label: \"Wide\" },\r\n  ];\r\n  const colors = [\r\n    \"color_1\",\r\n    \"color_2\",\r\n    \"color_3\",\r\n    \"color_4\",\r\n    \"color_5\",\r\n    \"color_6\",\r\n    \"color_7\",\r\n    \"color_8\",\r\n    \"color_9\",\r\n    \"color_10\",\r\n    \"color_11\",\r\n    \"color_12\",\r\n    \"color_13\",\r\n    \"color_14\",\r\n    \"color_15\",\r\n  ];\r\n  const directionPosition = [\r\n    { value: \"ltr\", label: \"LTR\" },\r\n    { value: \"rtl\", label: \"RTL\" },\r\n  ];\r\n  const fontFamily = [\r\n    { value: \"poppins\", label: \"Poppins\" },\r\n    { value: \"roboto\", label: \"Roboto\" },\r\n    { value: \"cairo\", label: \"Cairo\" },\r\n    { value: \"opensans\", label: \"Open Sans\" },\r\n    { value: \"HelveticaNeue\", label: \"HelveticaNeue\" },\r\n  ];\r\n  const changePrimaryColor = (name) => {\r\n    setPrimaryColor(name);\r\n    body.setAttribute(\"data-primary\", name);\r\n  };\r\n  const changeNavigationHader = (name) => {\r\n    setNavigationHader(name);\r\n    body.setAttribute(\"data-nav-headerbg\", name);\r\n  };\r\n  const chnageHaderColor = (name) => {\r\n    setHaderColor(name);\r\n    body.setAttribute(\"data-headerbg\", name);\r\n  };\r\n  const chnageSidebarColor = (name) => {\r\n    setSidebarColor(name);\r\n    body.setAttribute(\"data-sibebarbg\", name);\r\n  };\r\n  const changeSideBarPostion = (name) => {\r\n    setSidebarposition(name);\r\n    body.setAttribute(\"data-sidebar-position\", name.value);\r\n  };\r\n  const changeDirectionLayout = (name) => {\r\n    setDirection(name);\r\n    body.setAttribute(\"direction\", name.value);\r\n    let html = document.querySelector(\"html\");\r\n    html.setAttribute(\"dir\", name.value);\r\n    html.className = name.value;\r\n  };\r\n  const changeSideBarLayout = (name) => {\r\n    if (name.value === \"horizontal\") {\r\n      if (sideBarStyle.value === \"overlay\") {\r\n        setSidebarLayout(name);\r\n        body.setAttribute(\"data-layout\", name.value);\r\n        setSideBarStyle({ value: \"full\", label: \"Full\" });\r\n        body.setAttribute(\"data-sidebar-style\", \"full\");\r\n      } else {\r\n        setSidebarLayout(name);\r\n        body.setAttribute(\"data-layout\", name.value);\r\n      }\r\n    } else {\r\n      setSidebarLayout(name);\r\n      body.setAttribute(\"data-layout\", name.value);\r\n    }\r\n  };\r\n  const changeSideBarStyle = (name) => {\r\n    if (sidebarLayout.value === \"horizontal\") {\r\n      if (name.value === \"overlay\") {\r\n        alert(\"Sorry! Overlay is not possible in Horizontal layout.\");\r\n      } else {\r\n        setSideBarStyle(name);\r\n        setIconHover(name.value === \"icon-hover\" ? \"_i-hover\" : \"\");\r\n        body.setAttribute(\"data-sidebar-style\", name.value);\r\n      }\r\n    } else {\r\n      setSideBarStyle(name);\r\n      setIconHover(name.value === \"icon-hover\" ? \"_i-hover\" : \"\");\r\n      body.setAttribute(\"data-sidebar-style\", name.value);\r\n    }\r\n  };\r\n\r\n  const changeHeaderPostion = (name) => {\r\n    setHeaderposition(name);\r\n    body.setAttribute(\"data-header-position\", name.value);\r\n  };\r\n\r\n  const openMenuToggle = () => {\r\n    sideBarStyle.value === \"overly\"\r\n      ? setMenuToggle(true)\r\n      : setMenuToggle(false);\r\n  };\r\n\r\n  const changeBackground = (name) => {\r\n    body.setAttribute(\"data-theme-version\", name.value);\r\n    setBackground(name);\r\n  };\r\n\r\n  const changeContainerPosition = (name) => {\r\n    setcontainerPosition_(name);\r\n    body.setAttribute(\"data-container\", name.value);\r\n    name.value === \"boxed\" &&\r\n      changeSideBarStyle({ value: \"overlay\", label: \"Overlay\" });\r\n  };\r\n\r\n  const setDemoTheme = (theme, direction) => {\r\n\r\n    var setAttr = {};\r\n\r\n\r\n    var themeSettings = dezThemeSet[theme];\r\n\r\n    body.setAttribute(\"data-typography\", themeSettings.typography);\r\n\r\n    setAttr.value = themeSettings.version;\r\n    changeBackground(setAttr);\r\n\r\n    setAttr.value = themeSettings.layout;\r\n    changeSideBarLayout(setAttr);\r\n\r\n    //setAttr.value = themeSettings.primary;\r\n    changePrimaryColor(themeSettings.primary);\r\n\r\n    //setAttr.value = themeSettings.navheaderBg;\r\n    changeNavigationHader(themeSettings.navheaderBg);\r\n\r\n    //setAttr.value = themeSettings.headerBg;\r\n    chnageHaderColor(themeSettings.headerBg);\r\n\r\n    setAttr.value = themeSettings.sidebarStyle;\r\n    changeSideBarStyle(setAttr);\r\n\r\n    //setAttr.value = themeSettings.sidebarBg;\r\n    chnageSidebarColor(themeSettings.sidebarBg);\r\n\r\n    setAttr.value = themeSettings.sidebarPosition;\r\n    changeSideBarPostion(setAttr);\r\n\r\n    setAttr.value = themeSettings.headerPosition;\r\n    changeHeaderPostion(setAttr);\r\n\r\n    setAttr.value = themeSettings.containerLayout;\r\n    changeContainerPosition(setAttr);\r\n\r\n    //setAttr.value = themeSettings.direction;\r\n    setAttr.value = direction;\r\n    changeDirectionLayout(setAttr);\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    const body = document.querySelector(\"body\");\r\n    body.setAttribute(\"data-typography\", \"poppins\");\r\n   // body.setAttribute(\"data-theme-version\", \"light\");\r\n    body.setAttribute(\"data-layout\", \"vertical\");\r\n    body.setAttribute(\"data-primary\", \"color_1\");\r\n    body.setAttribute(\"data-nav-headerbg\", \"color_1\");\r\n    body.setAttribute(\"data-headerbg\", \"color_1\");\r\n    body.setAttribute(\"data-sidebar-style\", \"overlay\");\r\n    body.setAttribute(\"data-sibebarbg\", \"color_1\");\r\n    body.setAttribute(\"data-primary\", \"color_1\");\r\n    body.setAttribute(\"data-sidebar-position\", \"fixed\");\r\n    body.setAttribute(\"data-header-position\", \"fixed\");\r\n    body.setAttribute(\"data-container\", \"wide\");\r\n    body.setAttribute(\"direction\", \"ltr\");\r\n    let resizeWindow = () => {\r\n      setWindowWidth(window.innerWidth);\r\n      setWindowHeight(window.innerHeight);\r\n      window.innerWidth >= 768 && window.innerWidth < 1024\r\n        ? body.setAttribute(\"data-sidebar-style\", \"mini\")\r\n        : window.innerWidth <= 768\r\n          ? body.setAttribute(\"data-sidebar-style\", \"overlay\")\r\n          : body.setAttribute(\"data-sidebar-style\", \"full\");\r\n    };\r\n    resizeWindow();\r\n    window.addEventListener(\"resize\", resizeWindow);\r\n    return () => window.removeEventListener(\"resize\", resizeWindow);\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{\r\n        body,\r\n        sideBarOption,\r\n        layoutOption,\r\n        backgroundOption,\r\n        sidebarposition,\r\n        headerPositions,\r\n        containerPosition,\r\n        directionPosition,\r\n        fontFamily,\r\n        primaryColor,\r\n        navigationHader,\r\n        windowWidth,\r\n        windowHeight,\r\n        changePrimaryColor,\r\n        changeNavigationHader,\r\n        changeSideBarStyle,\r\n        sideBarStyle,\r\n        changeSideBarPostion,\r\n        sidebarpositions,\r\n        changeHeaderPostion,\r\n        headerposition,\r\n        changeSideBarLayout,\r\n        sidebarLayout,\r\n        changeDirectionLayout,\r\n        changeContainerPosition,\r\n        direction,\r\n        colors,\r\n        haderColor,\r\n        chnageHaderColor,\r\n        chnageSidebarColor,\r\n        sidebarColor,\r\n        iconHover,\r\n        menuToggle,\r\n        openMenuToggle,\r\n        changeBackground,\r\n        background,\r\n        containerPosition_,\r\n        setDemoTheme,\r\n        setBackground,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n\r\n\r\n","/Users/abubakardev/Desktop/scal/client/src/store/store.js",[],"/Users/abubakardev/Desktop/scal/client/src/context/ThemeDemo.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Registration.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/pages/ForgotPassword.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/helpers/Auth.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Error404.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/pages/Login.js",[],"/Users/abubakardev/Desktop/scal/client/src/store/reducers/PostsReducer.js",[],"/Users/abubakardev/Desktop/scal/client/src/store/reducers/AuthReducer.js",[],"/Users/abubakardev/Desktop/scal/client/src/store/reducers/Reducers.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/index.js",["200"],"import React, { useContext, useEffect } from \"react\";\r\n\r\n/// React router dom\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n/// Css\r\nimport \"./index.css\";\r\nimport \"./chart.css\";\r\nimport \"./step.css\";\r\n\r\n/// Layout\r\nimport Nav from \"./layouts/nav\";\r\nimport Footer from \"./layouts/Footer\";\r\n/// Dashboard\r\nimport Home from \"./components/Dashboard/Home\";\r\nimport About from \"./components/Dashboard/About\";\r\nimport LocalScan from \"./components/Dashboard/LocalScan\";\r\nimport BytecodeScan from \"./components/Dashboard/BytecodeScan\";\r\nimport Tools from \"./components/Dashboard/Tools\";\r\nimport ScanHistory from \"./components/Dashboard/ScanHistory\";\r\n\r\n\r\n/// App\r\nimport AppProfile from \"./components/AppsMenu/AppProfile/AppProfile\";\r\n\r\n\r\n/// Pages\r\nimport { ThemeContext } from \"../context/ThemeContext\";\r\nimport Error404 from \"./pages/Error404\";\r\n\r\nconst Markup = () => {\r\n  const { menuToggle } = useContext(ThemeContext);\r\n\r\n  const routes = [\r\n    /// Dashboard\r\n    { url: \"\", component: Home },\r\n    { url: \"about\", component: About },\r\n    { url: \"tools\", component: Tools },\r\n    { url: \"solidity-scan\", component: LocalScan },\r\n    { url: \"bytecode-scan\", component: BytecodeScan },\r\n    { url: \"dashboard\", component: Home },\r\n    { url: \"scan-history\", component: ScanHistory },\r\n\r\n    /// Apps\r\n    { url: \"app-profile\", component: AppProfile },\r\n\r\n  ];\r\n  let path = window.location.pathname;\r\n  path = path.split(\"/\");\r\n  path = path[path.length - 1];\r\n\r\n  let pagePath = path.split(\"-\").includes(\"page\");\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {\r\n        <div\r\n          id={`${!pagePath ? \"main-wrapper\" : \"\"}`}\r\n          className={`${!pagePath ? \"show\" : \"vh-100\"}  ${menuToggle ? \"menu-toggle\" : \"\"\r\n            }`}\r\n        >\r\n          {!pagePath && <Nav />}\r\n\r\n          <div className={`${!pagePath ? \"content-body\" : \"\"}`}>\r\n            <div\r\n              className={`${!pagePath ? \"container-fluid\" : \"\"}`}\r\n              style={{ minHeight: window.screen.height - 60 }}\r\n            >\r\n              <Switch>\r\n                {routes.map((data, i) => (\r\n                  <Route\r\n                    key={i}\r\n                    exact\r\n                    path={`/${data.url}`}\r\n                    component={data.component}\r\n                  />\r\n                ))}\r\n                <Route exact path=\"/login\">\r\n                  <Redirect to=\"/dashboard\" />\r\n                </Route>\r\n                <Route exact path=\"/users/new/register\">\r\n                  <Redirect to=\"/dashboard\" />\r\n                </Route>\r\n                <Route exact path=\"/forgot-password\">\r\n                  <Redirect to=\"/dashboard\" />\r\n                </Route>\r\n                <Route exact path=\"users/password/reset/:token\">\r\n                  <Redirect to=\"/dashboard\" />\r\n                </Route>\r\n                <Route path='*' component={Error404} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n          {!pagePath && <Footer />}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Markup;\r\n","/Users/abubakardev/Desktop/scal/client/src/store/actions/AuthActions.js",[],"/Users/abubakardev/Desktop/scal/client/src/store/actions/PostTypes.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/Footer.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Tools.js",["201"],"import React, { Fragment, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Row, Card, Button, Modal } from \"react-bootstrap\";\n\nconst Tools = () => {\n  const [modalManticore, setModalManticore] = useState(false);\n  const [modalSlither, setModalSlither] = useState(false);\n  const [modalHoneybadger, setModalHoneybadger] = useState(false);\n  const [modalMythril, setModalMythril] = useState(false);\n  const [modalOsiris, setModalOsiris] = useState(false);\n  const [modalMaian, setModalMaian] = useState(false);\n  const [modalSecurify, setModalSecurify] = useState(false);\n  const [modalOyente, setModalOyente] = useState(false);\n  const [modalSmartcheck, setModalSmartcheck] = useState(false);\n  const [modalSolhint, setModalSolhint] = useState(false);\n\n  return (\n    <Fragment>\n\n      <Row>\n        {/* <!-- Manticore --> */}\n        <Modal className=\"fade\" show={modalManticore}>\n          <Modal.Header>\n            <Modal.Title>MANTICORE</Modal.Title>\n            <Button\n              onClick={() => setModalManticore(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Manticore is a symbolic execution tool for the analysis of smart contracts and binaries.\n            </p>\n            <h5 className=\"mt-1\">Features</h5>\n            <ul>\n              <li>Program Exploration: Manticore can execute a program with symbolic inputs and explore all the possible states it can reach\n              </li>\n              <hr />\n              <li>Input Generation: Manticore can automatically produce concrete inputs that result in a given program state</li>\n              <hr />\n              <li>Error Discovery: Manticore can detect crashes and other failure cases in binaries and smart contracts</li>\n              <hr />\n              <li>Instrumentation: Manticore provides fine-grained control of state exploration via event callbacks and instruction hooks</li>\n            </ul>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalManticore(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>MANTICORE</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Developed by Trail Of Bits, uses symbolic execution to find execution paths in EVM bytecode that lead to reentrancy vulnerabilities and reachable self-destruct operations.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Symbolic Execution Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalManticore(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Slither --> */}\n        <Modal className=\"fade\" show={modalSlither}>\n          <Modal.Header>\n            <Modal.Title>SLITHER</Modal.Title>\n            <Button\n              onClick={() => setModalSlither(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Slither is a Solidity static analysis framework written in Python 3. It runs a suite of vulnerability detectors, prints visual information about contract details, and provides an API to easily write custom analyses. Slither enables developers to find vulnerabilities, enhance their code comprehension, and quickly prototype custom analyses.\n              <h5 className=\"mt-1\">Features</h5>\n              <ul>\n                <li>Detects vulnerable Solidity code with low false positives (see the list of trophies)</li>\n                <hr />\n                <li>Identifies where the error condition occurs in the source code</li>\n                <hr />\n                <li>Easily integrates into continuous integration and Truffle builds</li>\n                <hr />\n                <li>Built-in 'printers' quickly report crucial contract information</li>\n                <hr />\n                <li>Ability to analyze contracts written with Solidity 0.4</li>\n                <hr />\n                <li>Intermediate representation (SlithIR) enables simple, high-precision analyses</li>\n                <hr />\n                <li>Average execution time of less than 1 second per contract</li>\n              </ul>\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalSlither(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>SLITHER</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Developed by Trail Of Bits, is a static analysis framework that converts Solidity smart contracts into an intermediate representation called SlithIR and applies known program analysis techniques such as dataflow and taint tracking to extract and refine information.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Static Analysis Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalSlither(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- HoneyBadger --> */}\n        <Modal className=\"fade\" show={modalHoneybadger}>\n          <Modal.Header>\n            <Modal.Title>HONEYBADGER</Modal.Title>\n            <Button\n              onClick={() => setModalHoneybadger(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Honeybadger consists of three main components: symbolic\n              analysis, cash flow analysis and honeypot analysis. The symbolic analysis component constructs the control flow graph\n              (CFG) and symbolically executes its different paths. The result of the symbolic analysis is afterwards propagated to the\n              cash flow analysis component as well as the honeypot analysis component. The cash flow analysis component uses the\n              result of the symbolic analysis to detect whether the contract\n              is capable to receive as well as transfer funds. Finally, the\n              honeypot analysis component aims at detecting the different\n              honeypots techniques using a combination of heuristics and the results of the symbolic analysis.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalHoneybadger(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>HONEYBADGER</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                It is an Oyente-based tool that employs symbolic execution and a set of heuristics to pinpoint honeypots in smart contracts. Honeypots are smart contracts that appear to have an obvious flaw in their design, which allows an arbitrary user to drain Ether from the contract, given that the user transfers a certain amount of Ether to the contract. When HoneyBadger detects that a contract appears to be vulnerable, it means that the developer of the contract wanted to make the contract look vulnerable, but is not vulnerable\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Honeypot Detection Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalHoneybadger(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Mythril --> */}\n        <Modal className=\"fade\" show={modalMythril}>\n          <Modal.Header>\n            <Modal.Title>MYTHRIL</Modal.Title>\n            <Button\n              onClick={() => setModalMythril(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Mythril is a security analysis tool for Ethereum smart contracts. It detects a range of security issues, including integer underflows, owner-overwrite-to-Ether-withdrawal, and others. Note that Mythril is targeted at finding common vulnerabilities, and is not able to discover issues in the business logic of an application. Furthermore, Mythril and symbolic executors are generally unsound, as they are often unable to explore all possible states of a program.\n\n              <h5 className=\"mt-1\">Mythril is capable detecting:</h5>\n              <ul>\n                <li>Delegate Call To Untrusted Contract</li>\n                <hr />\n                <li>Dependence on Predictable Variables</li>\n                <hr />\n                <li>Ether Thief</li>\n                <hr />\n                <li>Exceptions</li>\n                <hr />\n                <li>External Calls</li>\n                <hr />\n                <li>Integer</li>\n                <hr />\n                <li>Multiple Sends</li>\n                <hr />\n                <li>Suicide</li>\n                <hr />\n                <li>State Change External Calls</li>\n                <hr />\n                <li>Unchecked Retval</li>\n                <hr />\n                <li>User Supplied assertion</li>\n                <hr />\n                <li>Arbitrary Storage Write</li>\n                <hr />\n                <li>Arbitrary Jump</li>\n              </ul>\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalMythril(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>MYTHRIL</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Mythril is a security analysis tool for EVM bytecode. It detects security vulnerabilities in smart contracts built for Ethereum, Hedera, Quorum, Vechain, Roostock, Tron and other EVM-compatible blockchains. It uses symbolic execution, SMT solving and taint analysis to detect a variety of security vulnerabilities.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Security Analysis Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalMythril(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Osiris --> */}\n        <Modal className=\"fade\" show={modalOsiris}>\n          <Modal.Header>\n            <Modal.Title>OSIRIS</Modal.Title>\n            <Button\n              onClick={() => setModalOsiris(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Osiris is a framework that combines symbolic execution and taint analysis, in order to accurately find integer bugs in Ethereum smart contracts. Osiris detects a greater range of bugs than existing tools, while providing a better specificity of its detection. Besides being able to identify several vulnerabilities, it is also able to identify a yet unknown critical vulnerability in a couple of smart contracts that are currently deployed on the Ethereum blockchain.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalOsiris(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>OSIRIS</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                An analysis tool to detect integer bugs in Ethereum smart contracts. Osiris is based on Oyente.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Integer Bug Detection Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalOsiris(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Maian --> */}\n        <Modal className=\"fade\" show={modalMaian}>\n          <Modal.Header>\n            <Modal.Title>MAIAN</Modal.Title>\n            <Button\n              onClick={() => setModalMaian(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Maian is a tool for precisely specifying and reasoning about trace properties, which employs inter-procedural symbolic analysis and concrete validator for exhibiting real exploits. It finds exploits for the infamous Parity bug that indirectly locked 200 million dollars worth in Ether, which previous analyses failed to capture.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalMaian(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>MAIAN</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                An Oyente-based tool for automatic detection of buggy Ethereum smart contracts of three different types: prodigal, suicidal and greedy. Maian processes contract's bytecode and tries to build a trace of transactions to find and confirm bugs\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Trace Vulnerability Detection Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalMaian(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Securify --> */}\n        <Modal className=\"fade\" show={modalSecurify}>\n          <Modal.Header>\n            <Modal.Title>SECURIFY 2.0</Modal.Title>\n            <Button\n              onClick={() => setModalSecurify(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Securify is a security analyzer for Ethereum smart contracts that is scalable, fully automated,\n              and able to prove contract behaviors as safe/unsafe with respect to\n              a given property. Securify’s analysis consists of two steps. First, it\n              symbolically analyzes the contract’s dependency graph to extract\n              precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions\n              for proving if a property holds or not.\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalSecurify(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>SECURIFY 2.0</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Securify 2.0 is a security scanner for Ethereum smart contracts supported by the Ethereum Foundation and ChainSecurity. The core research behind Securify was conducted at the Secure, Reliable, and Intelligent Systems Lab at ETH Zurich.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n                Static Analysis Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalSecurify(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Oyente --> */}\n        <Modal className=\"fade\" show={modalOyente}>\n          <Modal.Header>\n            <Modal.Title>OYENTE</Modal.Title>\n            <Button\n              onClick={() => setModalOyente(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              Oyente is a symbolic execution tool capable of detecting various smart contract vulnerabilities that exists in the Solidity programming language.</p>\n              <h5 className=\"mt-1\">Oyente is capable detecting:</h5>\n              <ul>\n                <li>Transaction-Ordering Dependence</li>\n                <hr />\n                <li>Timestamp Dependence</li>\n                <hr />\n                <li>Mishandled Exceptions</li>\n                <hr />\n                <li>Reentrancy Vulnerability</li>\n              </ul>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalOyente(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>OYENTE</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n              Developed by Melonport AG, is one of the first smart contract analysis tools. It is also used as a basis for several other approaches like Maian and Osiris. Oyente uses symbolic execution on EVM bytecode to identify vulnerabilities\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n              Symbolic Execution Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalOyente(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Smartcheck--> */}\n        <Modal className=\"fade\" show={modalSmartcheck}>\n          <Modal.Header>\n            <Modal.Title>SMARTCHECK</Modal.Title>\n            <Button\n              onClick={() => setModalSmartcheck(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>SmartCheck is an extensible static analysis tool that detects them. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns.</p>\n            <p>SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalSmartcheck(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>SMARTCHECK</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n              It is an extensible static analysis tool for discovering vulnerabilities and other code issues in Ethereum smart contracts written in the Solidity programming language.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n              Static Analysis Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalSmartcheck(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n        {/* <!-- Solhint--> */}\n        <Modal className=\"fade\" show={modalSolhint}>\n          <Modal.Header>\n            <Modal.Title>SOLHINT</Modal.Title>\n            <Button\n              onClick={() => setModalSolhint(false)}\n              variant=\"\"\n              className=\"btn-close\"\n            >\n            </Button>\n          </Modal.Header>\n          <Modal.Body>\n            <p>Solhint provides security and style guide validations for solidity smart contracts</p>\n            <p>For example, visibility modifiers orders and naming, variable naming among others. </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={() => setModalSolhint(false)}\n              variant=\"danger light\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"col-xl-12\">\n          <Card>\n            <Card.Header>\n              <Card.Title>SOLHINT</Card.Title>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>\n              This is an open source project for linting Solidity code. This project provides both Security and Style Guide validations.\n              </Card.Text>\n            </Card.Body>\n            <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n              <Card.Text className=\" text-dark d-inline\">\n              Security Linting Tool\n              </Card.Text>\n              <Button\n                variant=\"primary\"\n                type=\"button\"\n                className=\"mb-2 me-2\"\n                onClick={() => setModalSolhint(true)}\n              >\n                Read More\n              </Button>\n            </Card.Footer>\n          </Card>\n        </div>\n      </Row>\n    </Fragment >\n  )\n}\n\nexport default Tools","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/About.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory.js",["202"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { isAuth } from \"../../helpers/Auth\"\nimport TableData from './ScanHistory/TableData'\n\n\nconst ScanHistory = () => {\n\n    const id = isAuth()?._id;\n    const [tableValue, setTableValue] = useState([]);\n\n    //Fetching scan data\n    useEffect(() => {\n        if (id) {\n            axios\n                .get(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/${id}`)\n                .then(res => {\n                    return res.data;\n                })\n                .then(data => {\n                    setTableValue(data.scan)\n                })\n                .catch((err) => console.log(err));\n        }\n    }, []);\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-lg-12\">\n                {tableValue && tableValue.length !== 0 ?\n                    <TableData props={tableValue} />\n                    :\n                    <h3 className=\"text-center\">No Analysis Saved</h3>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ScanHistory","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Home.js",["203","204","205","206","207","208","209"],"import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport axios from 'axios';\r\nimport { isAuth, isTheme } from \"../../helpers/Auth\";\r\nimport TableData from './Home/TableData';\r\n\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Home = () => {\r\n\r\n  const id = isAuth()?._id;\r\n  \r\n  const [totalProj, setTotalProj] = useState(0)\r\n  const [totalSol, setTotalSol] = useState(0)\r\n  const [totalByte, setTotalByte] = useState(0)\r\n  const [totalVulns, setTotalVulns] = useState(0)\r\n  const [graphData, setGraphData] = useState([])\r\n  const [tableValue, setTableValue] = useState(null)\r\n  const [lastVuln, setLastVuln] = useState(0)\r\n\r\n  //======== LOADING USER DATA ========//\r\n  useEffect(() => {\r\n    if (id) {\r\n      axios\r\n        .get(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/${id}`)\r\n        .then(res => {\r\n          return res.data;\r\n        })\r\n        .then(data => {\r\n          setTableValue(data.scan)\r\n          setTotalProj(data.scan.length)\r\n          setTotalSol(data.scan.length)\r\n\r\n          let sum = 0\r\n          let arr = []\r\n          let newDataArray = data.scan.forEach((scan) => {\r\n            arr.push(parseInt(scan.noOfVulns))\r\n            sum += parseInt(scan.noOfVulns);\r\n            setTotalVulns(sum)\r\n\r\n          })\r\n          setGraphData(arr);\r\n          setLastVuln(graphData[graphData.length - 1]);\r\n\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, []);\r\n\r\n  const motherChackBox = document.querySelector(\".product_order_single\");\r\n  const chackbox = document.querySelectorAll(\".product_order\");\r\n  const chackboxFun = (type) => {\r\n    for (let i = 0; i < chackbox.length; i++) {\r\n      const element = chackbox[i];\r\n      if (type === \"all\") {\r\n        if (motherChackBox.checked) {\r\n          element.checked = true;\r\n        } else {\r\n          element.checked = false;\r\n        }\r\n      } else {\r\n        if (!element.checked) {\r\n          motherChackBox.checked = false;\r\n          break;\r\n        } else {\r\n          motherChackBox.checked = true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  //=======  GRAPH DATA AND OPTIONS  ========//\r\n  const data = {\r\n    labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\r\n    ...graphData,\r\n    datasets: [\r\n      {\r\n        label: \"Analysis\",\r\n        data: graphData,\r\n        backgroundColor: \"#fff\",\r\n        borderColor: \"rgba(167, 43, 117)\",\r\n        borderWidth: 2,\r\n        strokeColor: \"rgba(167, 43, 117)\",\r\n        capBezierPoints: !0,\r\n        pointColor: \"#fff\",\r\n        pointBorderColor: \"rgba(167, 43, 117)\",\r\n        pointBackgroundColor: \"rgba(167, 43, 117)\",\r\n        pointBorderWidth: 3,\r\n        pointRadius: 1.5,\r\n        pointHoverBackgroundColor: \"rgba(167, 43, 117)\",\r\n        pointHoverBorderColor: \"rgba(167, 43, 117)\",\r\n        pointHoverRadius: 0,\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      enabled: false,\r\n    },\r\n    legend: {\r\n      display: false,\r\n      labels: {\r\n        usePointStyle: false,\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          display: false,\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false,\r\n          },\r\n          scaleLabel: {\r\n            display: false,\r\n            labelString: \"Month\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          display: false,\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: \"Value\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    elements: {\r\n      line: {\r\n        tension: 0,\r\n      },\r\n      point: {\r\n        radius: 0,\r\n        borderWidth: 0,\r\n      },\r\n    },\r\n    title: {\r\n      display: false,\r\n    },\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {/*======== NUMBER DISPLAY ROW =========*/}\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-3 col-sm-6\">\r\n          <div className=\"card gradient-1 card-bx\">\r\n            <div className=\"card-body d-flex align-items-center\">\r\n              <div className=\"me-auto text-white\">\r\n                <h2 className=\"text-white\">{totalProj}</h2>\r\n                <span className=\"fs-18\">Total Projects Audited</span>\r\n              </div>\r\n              <span className=\"ms-1 fs-1 text-white fas fa-shield-virus\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-sm-6\">\r\n          <div className=\"card gradient-2 card-bx\">\r\n            <div className=\"card-body d-flex align-items-center\">\r\n              <div className=\"me-auto text-white\">\r\n                <h2 className=\"text-white\">{totalVulns}</h2>\r\n                <span className=\"fs-18\">Total Vulnerabilities Found</span>\r\n              </div>\r\n              <span className=\"ms-1 fs-ultimate text-white fas fa-bug\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-sm-6\">\r\n          <div className=\"card gradient-3 card-bx\">\r\n            <div className=\"card-body d-flex align-items-center\">\r\n              <div className=\"me-auto text-white\">\r\n                <h2 className=\"text-white\">{totalSol}</h2>\r\n                <span className=\"fs-18\">Total Solidity Audited</span>\r\n              </div>\r\n              <span className=\"ms-1 fs-ultimate text-white fas fa-code\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-sm-6\">\r\n          <div className=\"card gradient-4 card-bx\">\r\n            <div className=\"card-body d-flex align-items-center\">\r\n              <div className=\"me-auto text-white\">\r\n                <h2 className=\"text-white\">{totalByte}</h2>\r\n                <span className=\"fs-18\">Total Bytecode Audited</span>\r\n              </div>\r\n              <span className=\"ms-1 fs-ultimatum text-white fab fa-ethereum\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/*======== LINE CHART N HACK LIST ROW =========*/}\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-6 col-lg-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body pb-0\">\r\n              <h4 className=\"card-title text-uppercase font-weight-normal\">\r\n                Vulnerabilty Analysis\r\n              </h4>\r\n              <h2 className=\"font-weight-normal text-danger\">\r\n                <span>\r\n                  <i className=\"fa fa-caret-up\"></i>\r\n                </span>\r\n                <span className=\"px-1\">{totalVulns}</span>\r\n              </h2>\r\n              <div className=\"row mt-5\">\r\n                <div className=\"col text-center\">\r\n                  <h5 className=\"font-weight-normal\">All Time</h5>\r\n                  <span className=\"text-normal\">{totalVulns}</span>\r\n                </div>\r\n                <div className=\"col text-center\">\r\n                  <h5 className=\"font-weight-normal\">Last Analysis</h5>\r\n                  <span className=\"text-danger\">{lastVuln}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"chart-wrapper mb-5 mx-5 my-5\">\r\n              <div style={{ height: 255 }}>\r\n                <Line data={data} options={options} height={255} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-6 col-xxl-6 col-lg-6\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0 pb-0\">\r\n              <h4 className=\"card-title text-uppercase\">Recent Exploits</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_TimeLine\"\r\n                className=\"widget-timeline dz-scroll height370 ps ps--active-y\"\r\n              >\r\n                <ul className=\"timeline\">\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>February 3, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Wormhole Protocol hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$325M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>March 23, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Axie Ronin Network hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$540M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>June 8, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Osmosis DEX hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$5M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>June 10, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        ApolloX hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$2.8M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>June 24, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Harmony Horizon Bridge hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$100M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>July 28, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Nirvana Finance hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$3.5M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>August 2, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Nomad Bridge hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$190M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>October 6, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        BSC Token Hub hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$100M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>October 11, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        TempleDAO hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$2.34M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>October 11, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        QANX Bridge Wallet hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$1.1M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>October 11, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Rabby Swap hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$200K</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <span\r\n                      className=\"timeline-panel\"\r\n                    >\r\n                      <span>October 12, 2022</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Mango Markets hacked for {\" \"}\r\n                        <strong className=\"text-primary\">$112M</strong>.\r\n                      </h6>\r\n                    </span>\r\n                  </li>\r\n                 \r\n                </ul>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/*======== ANALYSIS DISPLAY TABLE ROW =========*/}\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0 pb-0\">\r\n              <h4 className=\"card-title text-uppercase font-weight-normal\">\r\n                Scan History</h4>\r\n            </div>\r\n            {tableValue && tableValue.length !== 0 ?\r\n                <TableData props={tableValue} />\r\n              :\r\n              <h4 className=\"mt-5 mb-5 text-center\">No Analysis Saved Yet</h4>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default Home;","/Users/abubakardev/Desktop/scal/client/src/jsx/components/AppsMenu/AppProfile/AppProfile.js",["210","211","212","213","214"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { isAuth, setLocalStorage } from \"../../../helpers/Auth\";\r\nimport ChangeProfilePicture from './ChangeProfilePicture';\r\n\r\nconst AppProfile = () => {\r\n\tconst [activeToggle, setActiveToggle] = useState(\"aboutMe\");\r\n\tconst [newImage, setNewImage] = useState('');\r\n\tconst [imageData, setImageData] = useState('');\r\n\tconst [nameData, setNameData] = useState('');\r\n\tconst [roleData, setRoleData] = useState('');\r\n\tconst [emailData, setEmailData] = useState('');\r\n\tconst [bioData, setBioData] = useState('');\r\n\tconst id = isAuth()?._id;\r\n\r\n\tconst [email, setEmail] = useState('');\r\n\tconst [bio, setBio] = useState('');\r\n\tconst [name, setName] = useState('');\r\n\r\n\tconst changeProfilePictureHandler = (image) => {\r\n\t\tsetNewImage(image);\r\n\t};\r\n\r\n\tconst postData = {\r\n\t\tbio,\r\n\t\temail,\r\n\t\tname,\r\n\t}\r\n\tconsole.log(newImage)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (id) {\r\n\t\t\taxios\r\n\t\t\t\t.get(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/${id}`)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsetImageData(res.data.profilePicture);\r\n\t\t\t\t\tsetNameData(res.data.name);\r\n\t\t\t\t\tsetRoleData(res.data.role);\r\n\t\t\t\t\tsetEmailData(res.data.email);\r\n\t\t\t\t\tsetBioData(res.data.bio);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log(err));\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (postData.email == '') {\r\n\t\t\tpostData.email = isAuth()?.email;\r\n\t\t}\r\n\t\tif (postData.name == '') {\r\n\t\t\tpostData.name = isAuth()?.name;\r\n\t\t}\r\n\t\tif (postData.bio == '') {\r\n\t\t\tpostData.bio = isAuth()?.bio;\r\n\t\t}\r\n\t\tif (newImage === ''){\r\n\t\t\tpostData.profilePicture = imageData;\r\n\t\t} else {\r\n\t\t\tpostData.profilePicture = newImage\r\n\t\t}\r\n\t\tpostData._id = isAuth()?._id;\r\n\t\t\r\n\t\taxios\r\n\t\t\t.put(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/update`, postData)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tsetLocalStorage('user', res.data);\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-lg-12\">\r\n\t\t\t\t\t<div className=\"profile card card-body px-3 pt-3 pb-0\">\r\n\t\t\t\t\t\t<div className=\"profile-head\">\r\n\t\t\t\t\t\t\t<div className=\"photo-content \">\r\n\t\t\t\t\t\t\t\t<div className=\"cover-photo rounded\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"profile-info\">\r\n\t\t\t\t\t\t\t\t<div className=\"profile-photo\">\r\n\t\t\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\t\t\tsrc={imageData}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"img-fluid rounded-circle\"\r\n\t\t\t\t\t\t\t\t\t\talt=\"profile\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"profile-details\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"profile-name px-3 pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"text-primary mb-0\">{nameData}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<p>{roleData}</p>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"profile-email px-2 pt-2\">\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"text-muted mb-0\">{emailData}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<p>Email</p>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-xl-12\">\r\n\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<div className=\"profile-tab\">\r\n\t\t\t\t\t\t\t\t<div className=\"custom-tab-1\">\r\n\t\t\t\t\t\t\t\t\t<ul className=\"nav nav-tabs\">\r\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" onClick={() => setActiveToggle(\"aboutMe\")}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"#about-me\" data-toggle=\"tab\" className={`nav-link ${activeToggle === \"aboutMe\" ? \"active show\" : \"\"}`}>About Me</Link>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to=\"#profile-settings\" data-toggle=\"tab\" onClick={() => setActiveToggle(\"setting\")} className={`nav-link ${activeToggle === \"setting\" ? \"active show\" : \"\"}`}>Setting</Link>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t<div className=\"tab-content\">\r\n\t\t\t\t\t\t\t\t\t\t{/*PROFILE*/}\r\n\t\t\t\t\t\t\t\t\t\t<div id=\"about-me\" className={`tab-pane fade ${activeToggle === \"aboutMe\" ? \"active show\" : \"\"}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"profile-about-me\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-4 border-bottom-1 pb-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 className=\"text-primary\">About Me</h4>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{bioData}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"profile-personal-info\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"f-w-500\"> Name<span className=\"pull-right\">:</span></h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-9\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{nameData}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"f-w-500\">Email<span className=\"pull-right\">:</span></h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-9\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{emailData}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"f-w-500\"> Role<span className=\"pull-right\">:</span></h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-9\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{roleData}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t{/* SETTINGS */}\r\n\t\t\t\t\t\t\t\t\t\t<div id=\"profile-settings\" className={`tab-pane fade ${activeToggle === \"setting\" ? \"active show\" : \"\"}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"pt-3\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"settings-form\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 className=\"text-primary\">Account Setting</h4>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group mb-3 col-md-12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"form-label\">Change Profile Image {`(<100Kb)`}</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ChangeProfilePicture\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsendDataToParent={changeProfilePictureHandler}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group mb-3 col-md-12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"form-label\">Change Name</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" onChange={(e) => setName(e.target.value)} className=\"form-control\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group mb-3 col-md-12\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"form-label\">Update Bio</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" onChange={(e) => setBio(e.target.value)} placeholder=\"I am a .....\" className=\"form-control\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\" type=\"submit\">Save Changes</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default AppProfile;\r\n","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan.js",["215"],"import React, { Fragment } from \"react\";\nimport ImportAnalysis from \"./LocalScan/ImportAnalysis\"\nimport PasteAnalysis from \"./LocalScan/PasteAnalysis\";\nimport TestAnalysis from \"./LocalScan/TestAnalysis\";\n\nconst LocalScan = () => {\n\n  return (\n    <Fragment>\n      {/* ANALYSIS 1 */}\n      <ImportAnalysis />\n      {/* ANALYSIS 2 */}\n      <PasteAnalysis />\n      {/* ANALYSIS 3 */}\n     {/*  <TestAnalysis />  */}\n    </Fragment>\n  )\n}\n\nexport default LocalScan","/Users/abubakardev/Desktop/scal/client/src/services/AuthService.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/index.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/AppsMenu/AppProfile/ChangeProfilePicture.js",["216","217"],"import React, { useCallback, useEffect, useState } from 'react';\nimport { TiCamera } from 'react-icons/ti';\nimport { useDropzone } from 'react-dropzone';\n\nconst ChangeProfilePicture = ({ sendDataToParent }) => {\n  const [image, setImage] = useState('');\n\n  const onDrop = useCallback((acceptedFiles) => {\n    const acceptedFile = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImage(reader.result);\n    };\n    reader.readAsDataURL(acceptedFile);\n  });\n\n  useEffect(() => {\n    sendDataToParent(image);\n  }, [image, sendDataToParent]);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: 'image/png',\n    multiple: false,\n  });\n\n  return (\n      <div className=\"dropzone_container\"\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />{' '}\n        <span className=\"dropzone_image\"\n        >\n          <TiCamera size={30} color='#a72b75' />\n        </span>\n        <span\n        >\n          <img src={image} width={50} />\n        </span>\n      </div>\n  );\n};\n\nexport default ChangeProfilePicture;","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/TestAnalysis.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/TestAnalysis.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/Home/TableData.js",["218","219","220"],"import React, { useEffect, useRef, useState } from 'react'\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from 'react-bootstrap';\n\nconst TagRender = ({ value }) => {\n\n    const newValue = parseInt(value.noOfVulns);\n\n    return (\n        <>\n            {newValue == 0 ?\n                <span className=\"badge badge-success\">\n                    Safe\n                    <span className=\"ms-1 fa fa-check\" />\n                </span>\n\n                :\n                <>\n                    {newValue > 0 && newValue <= 3 ?\n                        <span className=\"badge badge-warning\">\n                            Low\n                            <span className=\"ms-1 fas fa-stream\" />\n                        </span>\n                        :\n                        <>\n                            {newValue > 3 && newValue <= 7 ?\n                                <span className=\"badge badge-primary\">\n                                    Medium\n                                    <span className=\"ms-1 fa fa-redo\" />\n                                </span>\n                                :\n                                <>\n                                    {newValue > 7 && newValue <= 11\n                                        ?\n                                        <span className=\"badge badge-primary\">\n                                            Medium\n                                            <span className=\"ms-1 fa fa-redo\" />\n                                        </span>\n                                        :\n                                        <>\n                                            {newValue > 11\n                                                ?\n\n                                                <span className=\"badge badge-danger\">\n                                                    Critical\n                                                    <span className=\"ms-1 fa fa-ban\" />\n                                                </span>\n\n                                                :\n                                                <></>\n                                            }\n                                        </>\n                                    }\n                                </>\n\n                            }\n\n                        </>\n\n                    }\n\n                </>\n\n            }\n        </>\n    );\n\n}\n\nconst TableData = ({ props }) => {\n\n    const sort = 15;\n    const activePage = useRef(0);\n    const [test, settest] = useState(0);\n    const [data, setData] = useState(\n        document.querySelectorAll(\"#scanTable tbody tr\")\n    );\n\n    // Active data\n    async function changeData(first, sec) {\n        for (var i = 0; i < data.length; ++i) {\n            if (i >= first && i < sec) {\n                data[i].classList.remove(\"d-none\");\n            } else {\n                data[i].classList.add(\"d-none\");\n            }\n        }\n    };\n\n    useEffect(() => {\n        setData(document.querySelectorAll(\"#scanTable tbody tr\"));\n    }, [test]);\n\n    // Active pagination\n    activePage.current === 0 && changeData(0, sort);\n    // paggination\n    let paggination = Array(Math.ceil(data.length / sort))\n        .fill()\n        .map((_, i) => i + 1);\n\n    // Active pagination & change data\n    const onClick = (i) => {\n        activePage.current = i;\n        changeData(activePage.current * sort, (activePage.current + 1) * sort);\n        settest(i);\n    };\n\n\n    return (\n        <>\n            <div className=\"card-body \" style={{ padding: \"1.25rem\" }}>\n                <div id=\"scanTable\" className=\"table-responsive dataTables_wrapper\">\n                    <table className=\"table table-sm mb-0 table-responsive-lg \">\n                        <thead>\n                            <tr>\n\n                                <th className=\"align-middle text-center\">Analysis Name</th>\n                                <th className=\"align-middle text-center\">Vulnerabilities</th>\n                                <th className=\"align-middle text-center\">File Type</th>\n                                <th className=\"align-middle pr-7 text-center\">Date</th>\n                                <th className=\"align-middle text-center\">Status</th>\n                                <th className=\"no-sort\" />\n                            </tr>\n                        </thead>\n                        <tbody id=\"orders\">\n                            {props.map((value) => {\n                                return (\n                                    <tr className=\"btn-reveal-trigger text-center\">\n\n                                        <td className=\"py-3\">\n                                            <strong>{value.analysisName}</strong>\n                                        </td>\n                                        <td className=\"py-3\">{value.noOfVulns}</td>\n                                        <td className=\"py-3\">\n                                            {value.fileType}\n                                        </td>\n                                        <td className=\"py-3\">{value.scanPeriod}</td>\n                                        <td className=\"py-3 text-right\">\n                                            <TagRender value={value} />\n                                        </td>\n\n                                    </tr>\n                                )\n                            })}\n\n                        </tbody>\n                    </table>\n                    <div className=\"d-sm-flex text-center justify-content-between align-items-center mt-3\">\n                        <div className=\"dataTables_info \">\n                            Showing {activePage.current * sort + 1} to{\" \"}\n                            {data.length > (activePage.current + 1) * sort\n                                ? (activePage.current + 1) * sort\n                                : data.length}{\" \"}\n                            of {data.length} entries\n                        </div>\n                        <div\n                            className=\"dataTables_paginate paging_simple_numbers\"\n                            id=\"example2_paginate\"\n                        >\n                            <span\n                                className=\"paginate_button previous disabled\"\n                                onClick={() =>\n                                    activePage.current > 0 &&\n                                    onClick(activePage.current - 1)\n                                }\n                            >\n                                <i className=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\n                            </span>\n                            <span>\n                                {paggination.map((number, i) => (\n                                    <span\n                                        key={i}\n                                        className={`paginate_button  ${activePage.current === i ? \"current\" : \"\"\n                                            } `}\n                                        onClick={() => onClick(i)}\n                                    >\n                                        {number}\n                                    </span>\n                                ))}\n                            </span>\n\n                            <span\n                                className=\"paginate_button next\"\n                                onClick={() =>\n                                    activePage.current + 1 < paggination.length &&\n                                    onClick(activePage.current + 1)\n                                }\n                            >\n                                <i className=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default TableData","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/TableData.js",["221"],"import React, { useState,useEffect, useRef } from \"react\";\nimport TagRender from './TagRender';\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Dropdown } from 'react-bootstrap';\nimport AnalysisResult from './AnalysisResult';\nimport Pdf from \"react-to-pdf\"\nimport { Link } from \"react-router-dom\";\n\nconst TableData = ({ props }) => {\n    const [historyModal, setHistoryModal] = useState(false)\n    const [modalValue, setModalValue] = useState('')\n    const ref = React.createRef();\n    const sort = 15;\n    const activePage = useRef(0);\n    const [test, settest] = useState(0);\n    const [data, setData] = useState(\n        document.querySelectorAll(\"#scanTable tbody tr\")\n    );\n   \n    // Active data\n    async function changeData(first, sec) {\n        for (var i = 0; i < data.length; ++i) {\n            if (i >= first && i < sec) {\n                data[i].classList.remove(\"d-none\");\n            } else {\n                data[i].classList.add(\"d-none\");\n            }\n        }\n    };\n\n    useEffect(() => {\n        setData(document.querySelectorAll(\"#scanTable tbody tr\"));\n    }, [test]);\n\n    // Active pagination\n    activePage.current === 0 && changeData(0, sort);\n    // paggination\n    let paggination = Array(Math.ceil(data.length / sort))\n        .fill()\n        .map((_, i) => i + 1);\n\n    // Active pagination & change data\n    const onClick = (i) => {\n        activePage.current = i;\n        changeData(activePage.current * sort, (activePage.current + 1) * sort);\n        settest(i);\n    };\n\n    return (\n        <div className=\"card\">\n            <div className=\"card-body \" style={{ padding: \"1.25rem\" }}>\n                <div id=\"scanTable\" className=\"table-responsive dataTables_wrapper\">\n                    <table className=\"table table-sm mb-0 table-responsive-lg \">\n                        <thead>\n                            <tr>\n                                <th className=\"align-middle text-center\">Analysis Name</th>\n                                <th className=\"align-middle text-center\">Vulnerabilities</th>\n                                <th className=\"align-middle text-center\">File Type</th>\n                                <th className=\"align-middle pr-7 text-center\">Date</th>\n                                <th className=\"align-middle text-center\">Status</th>\n                                <th className=\"no-sort\" />\n                            </tr>\n                        </thead>\n                        <tbody id=\"orders\">\n                            {props.map((value) => {\n                                return (\n                                    <React.Fragment>\n                                        <tr key={value.id} id=\"scanValue\" className=\"btn-reveal-trigger text-center\">\n\n                                            <td className=\"py-2\">\n                                                <strong>{value.analysisName}</strong>\n                                            </td>\n                                            <td className=\"py-2\">{value.noOfVulns}</td>\n                                            <td className=\"py-2\">\n                                                {value.fileType}\n                                            </td>\n                                            <td className=\"py-2\">{value.scanPeriod}</td>\n                                            <td className=\"py-2 text-right\">\n                                                <TagRender value={value} />\n                                            </td>\n                                            <td className=\"py-2 text-right\">\n                                                <Dropdown className=\"dropdown text-sans-serif\">\n                                                    <Dropdown.Toggle\n                                                        variant=\"\"\n                                                        className=\"btn btn-primary i-false tp-btn-light sharp\"\n                                                        type=\"button\"\n                                                        id=\"order-dropdown-0\"\n                                                        data-toggle=\"dropdown\"\n                                                        data-boundary=\"viewport\"\n                                                        aria-haspopup=\"true\"\n                                                        aria-expanded=\"false\"\n                                                    >\n                                                        <span>\n                                                            <svg\n                                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                                                                width=\"18px\"\n                                                                height=\"18px\"\n                                                                viewBox=\"0 0 24 24\"\n                                                                version=\"1.1\"\n                                                            >\n                                                                <g\n                                                                    stroke=\"none\"\n                                                                    strokeWidth={1}\n                                                                    fill=\"none\"\n                                                                    fillRule=\"evenodd\"\n                                                                >\n                                                                    <rect x={0} y={0} width={24} height={24} />\n                                                                    <circle fill=\"#000000\" cx={5} cy={12} r={2} />\n                                                                    <circle\n                                                                        fill=\"#000000\"\n                                                                        cx={12}\n                                                                        cy={12}\n                                                                        r={2}\n                                                                    />\n                                                                    <circle\n                                                                        fill=\"#000000\"\n                                                                        cx={19}\n                                                                        cy={12}\n                                                                        r={2}\n                                                                    />\n                                                                </g>\n                                                            </svg>\n                                                        </span>\n                                                    </Dropdown.Toggle>\n                                                    <Dropdown.Menu\n                                                        className=\"dropdown-menu dropdown-menu-right border py-0\"\n                                                        aria-labelledby=\"order-dropdown-0\"\n                                                    >\n                                                        <div className=\"py-2\">\n                                                            <p\n                                                                className=\"dropdown-item text-danger\"\n                                                                onClick={() => {\n                                                                    setModalValue(value)\n                                                                    setHistoryModal(true)\n\n                                                                }}\n                                                            >View</p>\n                                                            {historyModal &&\n                                                                <Modal\n                                                                    className=\"fade bd-example-modal-lg\"\n                                                                    show={historyModal}\n                                                                    size=\"lg\"\n                                                                >\n                                                                    <Modal.Header>\n                                                                        <Modal.Title>Analysis Result</Modal.Title>\n                                                                        <Button\n                                                                            variant=\"\"\n                                                                            className=\"btn-close\"\n                                                                            onClick={() => {\n                                                                                setHistoryModal(false)\n                                                                                setModalValue('')\n                                                                                window.location.reload()\n                                                                            }}\n                                                                        >\n                                                                        </Button>\n                                                                    </Modal.Header>\n                                                                    <Modal.Body ref={ref}>\n                                                                        <AnalysisResult props={modalValue} />\n                                                                    </Modal.Body>\n                                                                    <Modal.Footer>\n                                                                        <Button\n                                                                            variant=\"danger light\"\n                                                                            onClick={() => {\n                                                                                setHistoryModal(false)\n                                                                                setModalValue('')\n                                                                                window.location.reload()\n                                                                            }}\n                                                                        >\n                                                                            Close\n                                                                        </Button>\n                                                                        <Pdf targetRef={ref} filename=\"ScalAnalysis.pdf\">\n                                                                            {({ toPdf }) => <button variant=\"\"\n                                                                                type=\"button\"\n                                                                                className=\"btn btn-primary\" onClick={toPdf}> <i className=\"fa fa-download me-1\"></i>\n                                                                                Download Analysis</button>}\n                                                                        </Pdf>\n                                                                    </Modal.Footer>\n                                                                </Modal>\n                                                            }\n\n                                                            {/*<div className=\"dropdown-divider\" />\n                                            <p\n                                                className=\"dropdown-item text-danger\"\n                                                onClick={() => setHistoryModal(true)}\n                                            >\n                                                Delete\n                                            </p>*/}\n                                                        </div>\n                                                        {/* Result Modal */}\n\n\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n                                            </td>\n                                        </tr>\n                                    </React.Fragment>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                    <div className=\"d-sm-flex text-center justify-content-between align-items-center mt-3\">\n                        <div className=\"dataTables_info \">\n                            Showing {activePage.current * sort + 1} to{\" \"}\n                            {data.length > (activePage.current + 1) * sort\n                                ? (activePage.current + 1) * sort\n                                : data.length}{\" \"}\n                            of {data.length} entries\n                        </div>\n                        <div\n                            className=\"dataTables_paginate paging_simple_numbers\"\n                            id=\"example2_paginate\"\n                        >\n                            <span\n                                className=\"paginate_button previous disabled\"\n                                onClick={() =>\n                                    activePage.current > 0 &&\n                                    onClick(activePage.current - 1)\n                                }\n                            >\n                                <i className=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>\n                            </span>\n                            <span>\n                                {paggination.map((number, i) => (\n                                    <span\n                                        key={i}\n                                        className={`paginate_button  ${activePage.current === i ? \"current\" : \"\"\n                                            } `}\n                                        onClick={() => onClick(i)}\n                                    >\n                                        {number}\n                                    </span>\n                                ))}\n                            </span>\n\n                            <span\n                                className=\"paginate_button next\"\n                                onClick={() =>\n                                    activePage.current + 1 < paggination.length &&\n                                    onClick(activePage.current + 1)\n                                }\n                            >\n                                <i className=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TableData;","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/PasteAnalysis.js",["222","223","224","225","226","227"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { isAuth } from '../../../helpers/Auth'\nimport Pdf from \"react-to-pdf\"\n\nimport { ThreeCircles } from 'react-loader-spinner';\n\n/// Bootstrap\nimport { Row, Card, Modal, Button } from \"react-bootstrap\";\nimport { set } from \"js-cookie\";\n\nconst ref = React.createRef();\n\nconst PasteAnalysis = () => {\n    const [pasteModal, setPasteModal] = useState(false);\n    const [resultModal, setResultModal] = useState(false);\n    const [loader, setloader] = useState(false);\n    const [analysisName, setAnalysisName] = useState('');\n    const [result, setResult] = useState([]);\n    const [file, setFile] = useState([]);\n    const [tools, setTools] = useState(['slither']);\n    let errorObj = { name: '', file: '' };\n    let current = new Date();\n    let scanPeriod = current.toLocaleDateString();\n    const fileType = 'SOL';\n    let toolUsed = tools;\n    const [noOfVulns, setNoOfVulns] = useState(0)\n    const [errors, setErrors] = useState(null);\n    const [save, setSave] = useState(null);\n    const [output, setOutput] = useState(null)\n\n    const postData = {\n        tools,\n        file,\n    };\n    const visible = 100;\n\n\n    /* FUNCTION TO RUN ANALYSIS*/\n    async function onRunAnalysis(e) {\n        e.preventDefault();\n        let error = false;\n        if (analysisName === '') {\n            errorObj.name = 'Analysis name not included';\n            error = true;\n        }\n        if (file.length === 0) {\n            errorObj.file = 'Solidity code not included';\n            error = true;\n        }\n        setErrors(errorObj);\n        if (error) {\n            return;\n        }\n        setloader(true);\n        axios\n            .post(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/file-input`, postData)\n            .then((res) => {\n                setResult(res);\n                setOutput(res.data[0].analysis);\n                console.log(res.data)\n                console.log(output)\n                setloader(false);\n                setPasteModal(false);\n                setResultModal(true);\n\n                if (res.data[0].tool === \"mythril\") {\n                    console.log('Mythril analysis')\n                    const vuln = res.data[0].analysis.issues.length;\n                    setNoOfVulns(vuln);\n                }\n\n                res.data?.map((res) => {\n                    if (res.tool === 'slither') {\n                        setNoOfVulns(res.analysis.length)\n                    }\n\n                    if (res.tool === 'solhint') {\n                        if (res.analysis.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis.length)\n                        }\n                    }\n\n                    if (res.tool === 'smartcheck') {\n                        if (res.analysis.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis.length)\n                        }\n                    }\n\n                    if (res.tool === 'manticore') {\n                        if (res.analysis[0].length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            ///setNoOfVulns(res.analysis[0].length)\n                            setNoOfVulns(0)\n                        }\n                    }\n\n                    if (res.tool === 'oyente') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'honeybadger') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'osiris') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'maian') {\n                        let vulns = 0;\n                        if (res.analysis.is_lock_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        if (res.analysis.is_suicidal_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        if (res.analysis.is_prodigal_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        setNoOfVulns(vulns);\n                    }\n\n                    if (res.tool === 'securify') {\n                        let vulns = 0;\n                        if (res.analysis == null) {\n                            setNoOfVulns(0);\n                        } else {\n                            if (res.analysis.toAnalyze.results.MissingInputValidation.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.UnhandledException.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODTransfer.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODReceiver.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODAmount.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.DAOConstantGas.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.DAO.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            setNoOfVulns(vulns)\n                        }\n                    }\n\n                })\n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    /*FUNCTION TO SAVE ANALYSIS RESULT*/\n    async function saveAnalysis() {\n        const saveData = {\n            analysisName,\n            noOfVulns,\n            output,\n            scanPeriod,\n            fileType,\n            toolUsed\n        }\n\n        axios\n            .post(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/updatescan/${isAuth()._id}`, saveData)\n            .then((res) => {\n                console.log(\"Saved Successfully\")\n                setSave(\"Analysis Saved Successfully\");\n            })\n            .catch((err) => {\n                console.log(err);\n                setSave(\"Analysis not saved\");\n            })\n    }\n\n     //ANALYSIS RESULT FORMATTING\n     const analysisData = result.data?.map((place) => {\n        {/*======= SLITHER =========*/ }\n        if (place.tool === 'slither') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.check}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.description.replaceAll(\"//workspace/scal-server/api/scal/toAnalyze/toAnalyze.sol\", \"Line \")}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">Vulnerability Impact: {analysis.impact}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'manticore') {\n            return (\n                <div>\n                    {place.analysis[0].length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.error.name}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                Code:\n                                                {analysis.error.code}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At Line: {analysis.error.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'solhint') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.message}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At Line: {analysis.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'mythril') {\n            return (\n                <div>\n                    {place.analysis.issues.length === 0 ?\n                        <h4>\n                            No Issues Detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis.issues?.slice(0, visible).map((issue) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{issue.title}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {issue.description}\n                                                <br />\n                                                <h5>Type: <i>{issue.type}</i></h5>\n\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">\n                                                <h5>\n                                                    Code:\n                                                    <i class=\"text-warning\"> {issue.code}</i> at line:\n                                                    <i class=\"text-warning\"> {issue.lineno}</i>\n                                                </h5>\n                                            </Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'oyente') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                            <br />\n                                                            <h5>Type: <i>{display.level}</i></h5>\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            At Line:\n                                                            <i className=\"text-warning\"> {display.line}</i>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'smartcheck') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.name}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.content}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At line: {analysis.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'osiris') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            <p>\n                                                                At Line:\n                                                                <i className=\"text-warning\"> {display.line}</i>\n                                                            </p>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'honeybadger') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                            <br />\n                                                            <h5>Type: <i>{display.level}</i></h5>\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            <h5>\n                                                                At Line:\n                                                                <i class=\"text-warning\"> {display.line}</i>\n                                                            </h5>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'maian') {\n            return (\n                <div>\n                    {!place.analysis.is_lock_vulnerable && !place.analysis.is_suicidal_vulnerable && !place.analysis.is_prodigal_vulnerable ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            <div className=\"col-xl-12\">\n                                <Card>\n                                    {place.analysis.is_lock_vulnerable ?\n                                        <>\n                                            <Card.Header className=\" border-0 pb-0\">\n                                                <Card.Title>Lock Vulnerability</Card.Title>\n                                            </Card.Header>\n                                            <Card.Body>\n                                                <Card.Text>\n                                                    The smart contract has a payable function but misses out on the withdrawal function. It implies that there is only a payment option in the smart contract, and if you are a sender in case of a transaction, your funds are bound to get locked in your contract.\n                                                </Card.Text>\n                                            </Card.Body>\n                                            <Card.Footer className=\" border-0 pt-0\">\n                                                <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                            </Card.Footer>\n                                        </>\n                                        :\n                                        <> </>\n                                    }\n                                    {\n                                        place.analysis.is_prodigal_vulnerable ?\n                                            <>\n                                                <Card.Header className=\" border-0 pb-0\">\n                                                    <Card.Title>Prodigal Vulnerability</Card.Title>\n                                                </Card.Header>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        The smart contract can send Ether to any address, without any restrictions\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <Card.Footer className=\" border-0 pt-0\">\n                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                </Card.Footer>\n                                            </>\n                                            :\n                                            <></>\n                                    }\n\n                                    {\n                                        place.analysis.is_suicidal_vulnerable ?\n                                            <>\n                                                <Card.Header className=\" border-0 pb-0\">\n                                                    <Card.Title>Suicidal Vulnerability</Card.Title>\n                                                </Card.Header>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        The smart contract can be killed by anyone\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <Card.Footer className=\" border-0 pt-0\">\n                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                </Card.Footer>\n                                            </>\n                                            :\n                                            <></>\n                                    }\n                                </Card>\n\n\n                            </div>\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'securify') {\n            return (\n                <div>\n                    {place.analysis === null || Object.keys(place.analysis.toAnalyze.results).length === 0 && place.analysis.toAnalyze.results.constructor === Object\n                        ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {!place.analysis.toAnalyze.results.MissingInputValidation.hasViolations && !place.analysis.toAnalyze.results.DAOConstantGas.hasViolations && !place.analysis.toAnalyze.results.DAO.hasViolations && !place.analysis.toAnalyze.results.TODAmount.hasViolations && !place.analysis.toAnalyze.results.TODReceiver.hasViolations && !place.analysis.toAnalyze.results.TODTransfer.hasViolations && !place.analysis.toAnalyze.results.UnhandledException.hasViolations && !place.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations\n                                ?\n                                <h4>\n                                    No Vulnerabilities detected\n                                </h4>\n                                :\n                                <Row>\n                                    <div className=\"col-xl-12\">\n                                        <Card>\n                                            {place.analysis.toAnalyze.results.MissingInputValidation.hasViolations ?\n                                                <>\n                                                    <Card.Header className=\" border-0 pb-0\">\n                                                        <Card.Title>Missing Input Validation</Card.Title>\n                                                    </Card.Header>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            This vulnerability is raised when a contract function takes an argument which is assumed to satisfy some pre-conditions but do not check that these preconditions are met.\n                                                        </Card.Text>\n\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                    </Card.Footer>\n                                                </>\n                                                :\n                                                <></>\n                                            }{\n                                                place.analysis.toAnalyze.results.DAOConstantGas.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>DAO Constant Gas</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility where changes to state after executing an ether transfer may be vulnerable to a reentrancy attack. An example, a variable holding the remaining ethers held being updated only after sending Ethers. In most cases should be avoided using transfer() or send(), but a better practice is to utilise Checks-Effects-Interactions pattern\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {place.analysis.toAnalyze.results.DAO.hasViolations ?\n                                                <>\n                                                    <Card.Header className=\" border-0 pb-0\">\n                                                        <Card.Title>DAO</Card.Title>\n                                                    </Card.Header>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            Reports the possibility of reentrancy attacks (similar to the DAO case), and more precisely this pattern checks if all gas is forwarded. Could be avoided by using the transfer() or send() operations which forwards only 2300 gas stipend.\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                    </Card.Footer>\n                                                </>\n                                                :\n                                                <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODAmount.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Amount</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where the amount of a transfer may be changed due to transaction ordering within a block. Similar to TODReceiver, but in this case, the amount being transferred may change. An example, during a crowdsale where the token multiplier * ethers received = tokens to send, where the token multipler is a variable which could be changed prior to the actual sending occurs.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODReceiver.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Receiver</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where the receiver of a transfer may be changed due to transaction ordering with a block. An example, if the intended recipient address is stored as a storage variable and a transfer is to execute based off this address, there is a chance the address may be changed or overwritten if there exists such a transaction prior to the transfer.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODTransfer.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Transfer</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility where the order of a transfer may be changed due to transaction ordering with a block.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.UnhandledException.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>Unhandled Exception</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility of whereupon using call() or send(), the return value is not being handled. For example, if a send() operation takes place where the receiving contract runs a fallback function which results in an out of gas error, the send() operation would not revert, but instead return false. Unlike transfer(), which acts like require(send()) and would revert the entire transaction.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <> </>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>Unrestricted Ether Flow</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where issues may arise when the contract allows ether to be received indiscriminately, especially to prevent the possibility where Ethers may be locked up due to a missing transfer operation.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                        </Card>\n\n                                    </div>\n                                </Row>\n                            }\n                        </>\n\n                    }\n                </div>\n            )\n        } else {\n            <h4>\n                No Vulnerabilities detected\n            </h4>\n        }\n    });\n\n    return (\n        <Row>\n            <div className=\"col-xl-12\">\n                <Card>\n                    <Card.Header>\n                        <Card.Title>Analysis #2</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>\n                            Paste a solidity smart contract code  to analyze.\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n                        <Card.Text className=\" text-dark d-inline\">\n                            **Only solidity code can be analyzed\n                        </Card.Text>\n\n                        {/* <!-- modal --> */}\n                        <Button\n                            variant=\"primary\"\n                            className=\"mb-2 me-2\"\n                            onClick={() => setPasteModal(true)}\n                        >\n                            Paste Code\n\n                        </Button>\n                        {/* Import Modal */}\n                        <Modal\n                            className=\"fade bd-example-modal-lg\"\n                            show={pasteModal}\n                            size=\"lg\"\n                        >\n                            <Modal.Header>\n                                <Modal.Title>Paste Solidity Code</Modal.Title>\n                                <Button\n                                    variant=\"\"\n                                    className=\"btn-close\"\n                                    onClick={() => {\n                                        setPasteModal(false)\n                                        setloader(false)\n                                        setErrors(null)\n                                        setAnalysisName('')\n                                        setFile('')\n                                        setTools(['slither'])\n                                    }}\n                                >\n                                </Button>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"card-body\">\n                                    <div className=\"basic-form\">\n                                        <form>\n                                            <label>Analysis Name</label>\n                                            <div className=\"form-group mb-3\">\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control input-default \"\n                                                    placeholder=\"Give this analysis a name...\"\n                                                    value={analysisName}\n                                                    onChange={(e) => setAnalysisName(e.target.value)}\n                                                />\n                                            </div>\n                                            <label>Paste your solidity code in the textbox</label>\n                                            <div className=\"form-group mb-3\">\n                                                <textarea\n                                                    className=\"form-control form-control-sp\"\n                                                    rows=\"10\"\n                                                    id=\"comment\"\n                                                    value={file}\n                                                    onChange={(e) => setFile(e.target.value)}\n                                                ></textarea>\n                                            </div>\n                                            <div className=\"form-group mb-3\">\n                                                <label>Select Audit tool:</label>\n\n                                                <select\n                                                    onChange={(e) => {\n                                                        setTools(e.target.value.toLowerCase().split(\" \"));\n                                                    }}\n                                                    className=\"form-control\"\n                                                    id=\"sel1\"\n                                                >\n                                                    <option>Slither</option>\n                                                    <option>Manticore</option>\n                                                    <option>Solhint</option>\n                                                    <option>Oyente</option>\n                                                    <option>Osiris</option>\n                                                    <option>Honeybadger</option>\n                                                    <option>Securify</option>\n                                                    <option>Mythril</option>\n                                                    <option>Maian</option>\n                                                    <option>SmartCheck</option>\n                                                </select>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n\n                            </Modal.Body>\n                            <Modal.Footer>\n                                {!loader ?\n                                    <>\n                                        {errors !== null ?\n                                            <h5 className=\"text-danger\">{errors.file}. {errors.name}</h5>\n                                            :\n                                            <></>\n                                        }\n                                        <Button\n                                            variant=\"danger light\"\n                                            onClick={() => {\n                                                setPasteModal(false)\n                                                setAnalysisName('')\n                                                setErrors(null)\n                                                setFile('')\n                                                setTools(['slither'])\n                                            }}\n                                        >\n                                            Close\n                                        </Button>\n                                        <Button\n                                            variant=\"\"\n                                            className=\"btn btn-primary\"\n                                            onClick={onRunAnalysis}\n                                        >\n                                            Run Analysis\n                                        </Button>\n                                    </>\n                                    :\n                                    <>\n                                        <h5>Analysing your contract. This might take a while...</h5>\n                                        <Button\n                                            variant=\"\"\n                                            className=\"btn btn-primary\"\n                                        >\n                                            <ThreeCircles\n                                                height=\"20\"\n                                                width=\"20\"\n                                                color=\"white\"\n                                                visible={true}\n                                                ariaLabel=\"three-circles-rotating\"\n                                            />\n                                        </Button>\n                                    </>\n\n                                }\n                            </Modal.Footer>\n                        </Modal>\n                        {/* Result Modal */}\n                        <Modal\n                            className=\"fade bd-example-modal-lg\"\n                            show={resultModal}\n                            size=\"lg\"\n                        >\n                            <Modal.Header>\n                                <Modal.Title>Analysis Result</Modal.Title>\n                                <Button\n                                    variant=\"\"\n                                    className=\"btn-close\"\n                                    onClick={() => {\n                                        setResultModal(false)\n                                        setAnalysisName('')\n                                        setFile('')\n                                        setSave('')\n                                        setTools(['slither'])\n                                        setNoOfVulns(0)\n                                        setOutput(null)\n                                    }}\n                                >\n                                </Button>\n                            </Modal.Header>\n                            <Modal.Body ref={ref}>\n                                <h4>Analysis Name: {analysisName}</h4>\n                                <h4>Tool Used: {tools}</h4>\n                                <h4>Analysis Result: </h4>\n                                {analysisData}\n                            </Modal.Body>\n                            <Modal.Footer>\n                                {save !== null ?\n                                    <h5>{save}</h5>\n                                    :\n                                    <></>\n                                }\n                                <Button\n                                    variant=\"danger light\"\n                                    onClick={() => {\n                                        setResultModal(false)\n                                        setAnalysisName('')\n                                        setFile('')\n                                        setTools(['slither'])\n                                        setSave('')\n                                        setNoOfVulns(0)\n                                        setOutput(null)\n                                    }\n                                    }\n                                >\n                                    Close\n                                </Button>\n                                <Button\n                                    variant=\"\"\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={saveAnalysis}\n                                >\n                                    <i className=\"fa fa-save me-1\"\n                                    ></i>\n                                    Save Analysis\n                                </Button>\n                                <Pdf targetRef={ref} filename=\"scal-analysis.pdf\">\n                                    {({ toPdf }) => <button variant=\"\"\n                                        type=\"button\"\n                                        className=\"btn btn-primary\" onClick={toPdf}> <i className=\"fa fa-download me-1\"></i>\n                                        Download Analysis</button>\n                                    }\n                                </Pdf>\n                            </Modal.Footer>\n                        </Modal>\n                    </Card.Footer>\n                </Card>\n            </div>\n        </Row>\n    )\n}\n\nexport default PasteAnalysis","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/LocalScan/ImportAnalysis.js",["228","229","230","231","232"],"import React, { useState, useContext } from \"react\";\nimport { ThreeCircles } from 'react-loader-spinner';\nimport axios from \"axios\";\nimport { isAuth } from '../../../helpers/Auth'\nimport Pdf from \"react-to-pdf\"\nimport { NotificationContext } from \"../../../../context/NotificationContext\";\n\n\n/// Bootstrap\nimport { Row, Card, Modal, Button } from \"react-bootstrap\";\n\nconst ref = React.createRef();\n\nconst ImportAnalysis = () => {\n    const [importModal, setImportModal] = useState(false);\n    const [loader, setloader] = useState(false);\n    const [result, setResult] = useState([]);\n    const [resultModal, setResultModal] = useState(false);\n    const [analysisName, setAnalysisName] = useState('');\n    const [file, setFile] = useState(null);\n    const [tools, setTools] = useState(['slither']);\n    let errorObj = { name: '', file: '' };\n    let current = new Date();\n    let scanPeriod = current.toLocaleDateString();\n    const fileType = 'SOL';\n    let toolUsed = tools;\n    let hour = current.toLocaleTimeString();\n    const [noOfVulns, setNoOfVulns] = useState(0)\n    const [errors, setErrors] = useState(null);\n    const [save, setSave] = useState(null);\n    const [output, setOutput] = useState(null);\n\n\n    const { setNotificationInfo, notification } = useContext(NotificationContext);\n\n\n    const handleFileSelect = (e) => {\n        setFile(e.target.files[0])\n\n    }\n    const visible = 100;\n\n    /* FUNCTION TO RUN ANALYSIS*/\n    async function onRunAnalysis(e) {\n        e.preventDefault();\n        let error = false;\n        if (analysisName === '') {\n            errorObj.name = 'Analysis name not included';\n            error = true;\n        }\n        if (file === null) {\n            errorObj.file = 'Solidity file not imported';\n            error = true;\n        }\n        setErrors(errorObj);\n        if (error) {\n            return;\n        }\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"tools\", tools);\n\n        setloader(true);\n        axios\n            ({\n                method: 'post',\n                url: 'https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/file-import',\n                data: formData,\n                headers: {\n                    tools: tools,\n                    \"Content-Type\": \"multipart/form-data\",\n                },\n            })\n            .then((res) => {\n                setResult(res);\n                setOutput(res.data[0].analysis);\n                console.log(res.data)\n                setloader(false);\n                setImportModal(false);\n                setResultModal(true);\n                setNotificationInfo(hour, analysisName);\n                console.log(notification)\n\n                if (res.data[0].tool === \"mythril\") {\n                    console.log('Mythril analysis')\n                    const vuln = res.data[0].analysis.issues.length;\n                    setNoOfVulns(vuln);\n                }\n\n                res.data?.map((res) => {\n                    if (res.tool === 'slither') {\n                        setNoOfVulns(res.analysis.length)\n                    }\n\n                    if (res.tool === 'solhint') {\n                        if (res.analysis.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis.length)\n                        }\n                    }\n\n                    if (res.tool === 'smartcheck') {\n                        if (res.analysis.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis.length)\n                        }\n                    }\n\n                    if (res.tool === 'manticore') {\n                        if (res.analysis[0].length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            ///setNoOfVulns(res.analysis[0].length)\n                            setNoOfVulns(0)\n                        }\n                    }\n\n                    if (res.tool === 'oyente') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'honeybadger') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'osiris') {\n                        if (res.analysis.length === 0 || res.analysis[0].errors.length === 0) {\n                            setNoOfVulns(0)\n                        } else {\n                            setNoOfVulns(res.analysis[0].errors.length)\n                        }\n                    }\n\n                    if (res.tool === 'maian') {\n                        let vulns = 0;\n                        if (res.analysis.is_lock_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        if (res.analysis.is_suicidal_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        if (res.analysis.is_prodigal_vulnerable) {\n                            vulns = vulns + 1;\n                        }\n                        setNoOfVulns(vulns);\n                    }\n\n                    if (res.tool === 'securify') {\n                        let vulns = 0;\n                        if (res.analysis == null) {\n                            setNoOfVulns(0);\n                        } else {\n                            if (res.analysis.toAnalyze.results.MissingInputValidation.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.UnhandledException.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODTransfer.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODReceiver.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.TODAmount.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.DAOConstantGas.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            if (res.analysis.toAnalyze.results.DAO.hasViolations) {\n                                vulns = vulns + 1;\n                            }\n                            setNoOfVulns(vulns)\n                        }\n                    }\n\n                })\n\n                \n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n\n    }\n    console.log(notification)\n\n    /*FUNCTION TO SAVE ANALYSIS RESULT*/\n    async function saveAnalysis() {\n        const saveData = {\n            analysisName,\n            noOfVulns,\n            output,\n            scanPeriod,\n            fileType,\n            toolUsed\n        }\n\n        axios\n            .post(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/updatescan/${isAuth()._id}`, saveData)\n            .then((res) => {\n                console.log(\"Saved Successfully\");\n                setSave(\"Analysis Saved Successfully\");\n            })\n            .catch((err) => {\n                console.log(err);\n                setSave(\"Analysis not saved\");\n            })\n\n\n    }\n\n    //ANALYSIS RESULT FORMATTING\n    const analysisData = result.data?.map((place) => {\n        {/*======= SLITHER =========*/ }\n        if (place.tool === 'slither') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.check}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.description.replaceAll(\"//workspace/scal-server/api/scal/toAnalyze/toAnalyze.sol\", \"Line \")}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">Vulnerability Impact: {analysis.impact}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'manticore') {\n            return (\n                <div>\n                    {place.analysis[0].length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.error.name}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                Code:\n                                                {analysis.error.code}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At Line: {analysis.error.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'solhint') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.message}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At Line: {analysis.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'mythril') {\n            return (\n                <div>\n                    {place.analysis.issues.length === 0 ?\n                        <h4>\n                            No Issues Detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis.issues?.slice(0, visible).map((issue) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{issue.title}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {issue.description}\n                                                <br />\n                                                <h5>Type: <i>{issue.type}</i></h5>\n\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">\n                                                <h5>\n                                                    Code:\n                                                    <i class=\"text-warning\"> {issue.code}</i> at line:\n                                                    <i class=\"text-warning\"> {issue.lineno}</i>\n                                                </h5>\n                                            </Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'oyente') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                            <br />\n                                                            <h5>Type: <i>{display.level}</i></h5>\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            At Line:\n                                                            <i className=\"text-warning\"> {display.line}</i>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'smartcheck') {\n            return (\n                <div>\n                    {place.analysis.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            {place.analysis?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.name}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.content}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">At line: {analysis.line}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'osiris') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            <p>\n                                                                At Line:\n                                                                <i className=\"text-warning\"> {display.line}</i>\n                                                            </p>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'honeybadger') {\n            return (\n                <div>\n                    {place.analysis.length === 0 || place.analysis[0].errors.length === 0 ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {place.analysis?.map((analysis) => (\n                                <Row>\n                                    {analysis.errors.map((display) => {\n                                        return (\n                                            <div className=\"col-xl-12\">\n                                                <Card>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            {display.message}\n                                                            <br />\n                                                            <h5>Type: <i>{display.level}</i></h5>\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">\n                                                            <h5>\n                                                                At Line:\n                                                                <i class=\"text-warning\"> {display.line}</i>\n                                                            </h5>\n                                                        </Card.Text>\n                                                    </Card.Footer>\n                                                </Card>\n                                            </div>\n                                        );\n                                    })}\n                                </Row>\n                            ))}\n                        </>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'maian') {\n            return (\n                <div>\n                    {!place.analysis.is_lock_vulnerable && !place.analysis.is_suicidal_vulnerable && !place.analysis.is_prodigal_vulnerable ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <Row>\n                            <div className=\"col-xl-12\">\n                                <Card>\n                                    {place.analysis.is_lock_vulnerable ?\n                                        <>\n                                            <Card.Header className=\" border-0 pb-0\">\n                                                <Card.Title>Lock Vulnerability</Card.Title>\n                                            </Card.Header>\n                                            <Card.Body>\n                                                <Card.Text>\n                                                    The smart contract has a payable function but misses out on the withdrawal function. It implies that there is only a payment option in the smart contract, and if you are a sender in case of a transaction, your funds are bound to get locked in your contract.\n                                                </Card.Text>\n                                            </Card.Body>\n                                            <Card.Footer className=\" border-0 pt-0\">\n                                                <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                            </Card.Footer>\n                                        </>\n                                        :\n                                        <> </>\n                                    }\n                                    {\n                                        place.analysis.is_prodigal_vulnerable ?\n                                            <>\n                                                <Card.Header className=\" border-0 pb-0\">\n                                                    <Card.Title>Prodigal Vulnerability</Card.Title>\n                                                </Card.Header>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        The smart contract can send Ether to any address, without any restrictions\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <Card.Footer className=\" border-0 pt-0\">\n                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                </Card.Footer>\n                                            </>\n                                            :\n                                            <></>\n                                    }\n\n                                    {\n                                        place.analysis.is_suicidal_vulnerable ?\n                                            <>\n                                                <Card.Header className=\" border-0 pb-0\">\n                                                    <Card.Title>Suicidal Vulnerability</Card.Title>\n                                                </Card.Header>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        The smart contract can be killed by anyone\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <Card.Footer className=\" border-0 pt-0\">\n                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                </Card.Footer>\n                                            </>\n                                            :\n                                            <></>\n                                    }\n                                </Card>\n\n\n                            </div>\n                        </Row>\n                    }\n                </div>\n            )\n        } else if (place.tool === 'securify') {\n            return (\n                <div>\n                    {place.analysis === null || Object.keys(place.analysis.toAnalyze.results).length === 0 && place.analysis.toAnalyze.results.constructor === Object\n                        ?\n                        <h4>\n                            No Vulnerabilities detected\n                        </h4>\n                        :\n                        <>\n                            {!place.analysis.toAnalyze.results.MissingInputValidation.hasViolations && !place.analysis.toAnalyze.results.DAOConstantGas.hasViolations && !place.analysis.toAnalyze.results.DAO.hasViolations && !place.analysis.toAnalyze.results.TODAmount.hasViolations && !place.analysis.toAnalyze.results.TODReceiver.hasViolations && !place.analysis.toAnalyze.results.TODTransfer.hasViolations && !place.analysis.toAnalyze.results.UnhandledException.hasViolations && !place.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations\n                                ?\n                                <h4>\n                                    No Vulnerabilities detected\n                                </h4>\n                                :\n                                <Row>\n                                    <div className=\"col-xl-12\">\n                                        <Card>\n                                            {place.analysis.toAnalyze.results.MissingInputValidation.hasViolations ?\n                                                <>\n                                                    <Card.Header className=\" border-0 pb-0\">\n                                                        <Card.Title>Missing Input Validation</Card.Title>\n                                                    </Card.Header>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            This vulnerability is raised when a contract function takes an argument which is assumed to satisfy some pre-conditions but do not check that these preconditions are met.\n                                                        </Card.Text>\n\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                    </Card.Footer>\n                                                </>\n                                                :\n                                                <></>\n                                            }{\n                                                place.analysis.toAnalyze.results.DAOConstantGas.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>DAO Constant Gas</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility where changes to state after executing an ether transfer may be vulnerable to a reentrancy attack. An example, a variable holding the remaining ethers held being updated only after sending Ethers. In most cases should be avoided using transfer() or send(), but a better practice is to utilise Checks-Effects-Interactions pattern\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {place.analysis.toAnalyze.results.DAO.hasViolations ?\n                                                <>\n                                                    <Card.Header className=\" border-0 pb-0\">\n                                                        <Card.Title>DAO</Card.Title>\n                                                    </Card.Header>\n                                                    <Card.Body>\n                                                        <Card.Text>\n                                                            Reports the possibility of reentrancy attacks (similar to the DAO case), and more precisely this pattern checks if all gas is forwarded. Could be avoided by using the transfer() or send() operations which forwards only 2300 gas stipend.\n                                                        </Card.Text>\n                                                    </Card.Body>\n                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                    </Card.Footer>\n                                                </>\n                                                :\n                                                <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODAmount.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Amount</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where the amount of a transfer may be changed due to transaction ordering within a block. Similar to TODReceiver, but in this case, the amount being transferred may change. An example, during a crowdsale where the token multiplier * ethers received = tokens to send, where the token multipler is a variable which could be changed prior to the actual sending occurs.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODReceiver.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Receiver</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where the receiver of a transfer may be changed due to transaction ordering with a block. An example, if the intended recipient address is stored as a storage variable and a transfer is to execute based off this address, there is a chance the address may be changed or overwritten if there exists such a transaction prior to the transfer.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.TODTransfer.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>TOD Transfer</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility where the order of a transfer may be changed due to transaction ordering with a block.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.UnhandledException.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>Unhandled Exception</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n\n                                                            <Card.Text>\n                                                                Reports the possibility of whereupon using call() or send(), the return value is not being handled. For example, if a send() operation takes place where the receiving contract runs a fallback function which results in an out of gas error, the send() operation would not revert, but instead return false. Unlike transfer(), which acts like require(send()) and would revert the entire transaction.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <> </>\n                                            }\n                                            {\n                                                place.analysis.toAnalyze.results.UnrestrictedEtherFlow.hasViolations ?\n                                                    <>\n                                                        <Card.Header className=\" border-0 pb-0\">\n                                                            <Card.Title>Unrestricted Ether Flow</Card.Title>\n                                                        </Card.Header>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                Reports the possibility where issues may arise when the contract allows ether to be received indiscriminately, especially to prevent the possibility where Ethers may be locked up due to a missing transfer operation.\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                        </Card.Footer>\n                                                    </>\n                                                    :\n                                                    <></>\n                                            }\n                                        </Card>\n\n                                    </div>\n                                </Row>\n                            }\n                        </>\n\n                    }\n                </div>\n            )\n        } else {\n            <h4>\n                No Vulnerabilities detected\n            </h4>\n        }\n    });\n\n    return (\n        <Row>\n            <div className=\"col-xl-12\">\n                <Card>\n                    <Card.Header>\n                        <Card.Title>Analysis #1</Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                        <Card.Text>\n                            Import a solidity smart contract file  to analyze.\n                        </Card.Text>\n                    </Card.Body>\n                    <Card.Footer className=\" d-sm-flex justify-content-between align-items-center\">\n                        <Card.Text className=\" text-dark d-inline\">\n                            **Only .sol file format is supported\n                        </Card.Text>\n\n                        {/* <!-- modal --> */}\n                        <Button\n                            variant=\"primary\"\n                            className=\"mb-2 me-2\"\n                            onClick={() => setImportModal(true)}\n                        >\n                            Import File\n                        </Button>\n                        {/* Import Modal */}\n                        <Modal\n                            className=\"fade bd-example-modal-lg\"\n                            show={importModal}\n                            size=\"lg\"\n                        >\n                            <Modal.Header>\n                                <Modal.Title>Import Solidity File</Modal.Title>\n                                <Button\n                                    variant=\"\"\n                                    className=\"btn-close\"\n                                    onClick={() => {\n                                        setImportModal(false)\n                                        setloader(false)\n                                        setErrors(null)\n                                        setAnalysisName('')\n                                        setFile('')\n                                        setTools(['slither'])\n                                    }}\n                                >\n                                </Button>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"card-body\">\n                                    <div className=\"basic-form form_file_input\">\n                                        <form onSubmit={(e) => e.preventDefault()}>\n                                            <label>Analysis Name</label>\n                                            <div className=\"form-group mb-3\">\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control input-default \"\n                                                    placeholder=\"Give this analysis a name...\"\n                                                    value={analysisName}\n                                                    onChange={(e) => setAnalysisName(e.target.value)}\n                                                />\n                                            </div>\n                                            <label>Click the button below to import your .sol file</label>\n                                            <div className=\"input-group mb-3\">\n                                                <div className=\"from-file\">\n                                                    <input type=\"file\" className=\"form-file-input form-control\" onChange={handleFileSelect} />\n                                                </div>\n                                            </div>\n                                            <div className=\"form-group mb-3\">\n                                                <label>Select Audit tool:</label>\n\n                                                <select\n                                                    onChange={(e) => {\n                                                        setTools(e.target.value.toLowerCase().split(\" \"));\n                                                    }}\n                                                    className=\"form-control\"\n                                                    id=\"sel1\"\n                                                >\n                                                    <option>Slither</option>\n                                                    <option>Manticore</option>\n                                                    <option>Solhint</option>\n                                                    <option>Oyente</option>\n                                                    <option>Osiris</option>\n                                                    <option>Honeybadger</option>\n                                                    <option>Securify</option>\n                                                    <option>Mythril</option>\n                                                    <option>Maian</option>\n                                                    <option>SmartCheck</option>\n                                                </select>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n\n                            </Modal.Body>\n                            <Modal.Footer>\n                                {!loader ?\n                                    <>\n                                        {errors !== null ?\n                                            <h5 className=\"text-danger\">{errors.file}{\" \"}{errors.name}</h5>\n                                            :\n                                            <></>\n                                        }\n                                        <Button\n                                            variant=\"danger light\"\n                                            onClick={() => {\n                                                setImportModal(false)\n                                                setAnalysisName('')\n                                                setErrors(null)\n                                                setFile(null)\n                                                setTools(['slither'])\n                                                setSave(null)\n                                            }}\n                                        >\n                                            Close\n                                        </Button>\n                                        <Button\n                                            variant=\"\"\n                                            className=\"btn btn-primary\"\n                                            onClick={onRunAnalysis}\n\n                                        >\n                                            Run Analysis\n                                        </Button>\n                                    </>\n                                    :\n                                    <>\n                                        <h5>Analysing your contract. This might take a while...</h5>\n                                        <Button\n                                            variant=\"\"\n                                            className=\"btn btn-primary\"\n                                        >\n                                            <ThreeCircles\n                                                height=\"20\"\n                                                width=\"20\"\n                                                color=\"white\"\n                                                visible={true}\n                                                ariaLabel=\"three-circles-rotating\"\n                                            />\n                                        </Button>\n                                    </>\n                                }\n                            </Modal.Footer>\n                        </Modal>\n                        {/* Result Modal */}\n                        <Modal\n                            className=\"fade bd-example-modal-lg\"\n                            show={resultModal}\n                            size=\"lg\"\n                        >\n                            <Modal.Header>\n                                <Modal.Title>Analysis Result</Modal.Title>\n                                <Button\n                                    variant=\"\"\n                                    className=\"btn-close\"\n                                    onClick={() => {\n                                        setResultModal(false)\n                                        setAnalysisName('')\n                                        setFile(null)\n                                        setTools(['slither'])\n                                        setSave(null)\n                                        setNoOfVulns(0)\n                                        setOutput(null)\n                                    }}\n                                >\n                                </Button>\n                            </Modal.Header>\n                            <Modal.Body ref={ref}>\n                                <h4>Analysis Name: {analysisName}</h4>\n                                <h4>Tool Used: {tools}</h4>\n                                <h4>Analysis Result: </h4>\n                                {analysisData}\n                            </Modal.Body>\n                            <Modal.Footer>\n                                {save !== null ?\n                                    <h5>{save}</h5>\n                                    :\n                                    <></>\n                                }\n                                <Button\n                                    variant=\"danger light\"\n                                    onClick={() => {\n                                        setResultModal(false)\n                                        setAnalysisName('')\n                                        setFile('')\n                                        setTools(['slither'])\n                                        setSave(null)\n                                        setNoOfVulns(0)\n                                        setOutput(null)\n                                    }\n                                    }\n                                >\n                                    Close\n                                </Button>\n                                <Button\n                                    variant=\"\"\n                                    type=\"button\"\n                                    className=\"btn btn-primary\"\n                                    onClick={saveAnalysis}\n                                >\n                                    <i className=\"fa fa-save me-1\"></i>\n                                    Save Analysis\n                                </Button>\n                                <Pdf targetRef={ref} filename=\"ScalAnalysis.pdf\">\n                                    {({ toPdf }) => <button variant=\"\"\n                                        type=\"button\"\n                                        className=\"btn btn-primary\" onClick={toPdf}> <i className=\"fa fa-download me-1\"></i>\n                                        Download Analysis</button>}\n                                </Pdf>\n                            </Modal.Footer>\n                        </Modal>\n\n                    </Card.Footer>\n                </Card>\n            </div>\n        </Row>\n    )\n}\n\nexport default ImportAnalysis;","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/ImportAnalysis.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/BytecodeScan/PasteAnalysis.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/Header.js",["233","234"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\nimport { isAuth, setTheme, isTheme, isNotification } from \"../../helpers/Auth\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport LogoutPage from './Logout';\r\nimport { ThemeContext } from \"../../../context/ThemeContext\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\nconst Header = ({ onNote }) => {\r\n\tvar path = window.location.pathname.split(\"/\");\r\n\tvar name = path[path.length - 1].split(\"-\");\r\n\tvar filterName = name.length >= 3 ? name.filter((n, i) => i > 0) : name;\r\n\tvar finalName = filterName.includes(\"app\")\r\n\t\t? filterName.filter((f) => f !== \"app\")\r\n\t\t: filterName.includes(\"ui\")\r\n\t\t\t? filterName.filter((f) => f !== \"ui\")\r\n\t\t\t: filterName.includes(\"uc\")\r\n\t\t\t\t? filterName.filter((f) => f !== \"uc\")\r\n\t\t\t\t: filterName.includes(\"basic\")\r\n\t\t\t\t\t? filterName.filter((f) => f !== \"basic\")\r\n\t\t\t\t\t: filterName.includes(\"jquery\")\r\n\t\t\t\t\t\t? filterName.filter((f) => f !== \"jquery\")\r\n\t\t\t\t\t\t: filterName.includes(\"table\")\r\n\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"table\")\r\n\t\t\t\t\t\t\t: filterName.includes(\"page\")\r\n\t\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"page\")\r\n\t\t\t\t\t\t\t\t: filterName.includes(\"email\")\r\n\t\t\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"email\")\r\n\t\t\t\t\t\t\t\t\t: filterName.includes(\"ecom\")\r\n\t\t\t\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"ecom\")\r\n\t\t\t\t\t\t\t\t\t\t: filterName.includes(\"chart\")\r\n\t\t\t\t\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"chart\")\r\n\t\t\t\t\t\t\t\t\t\t\t: filterName.includes(\"editor\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t? filterName.filter((f) => f !== \"editor\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t: filterName;\r\n\r\n\tconst [imageData, setImageData] = useState('');\r\n\tconst [nameData, setNameData] = useState('');\r\n\tconst [roleData, setRoleData] = useState('');\r\n\tconst id = isAuth()?._id;\r\n\tconst theme = isTheme()?.value\r\n\tconst notification = isNotification()\r\n\r\n\tconst {\r\n\t\tchangeBackground,\r\n\t} = useContext(ThemeContext);\r\n\r\n\tconst fixChange = () => {\r\n\t\tif (theme === \"dark\") {\r\n\t\t\tchangeBackground({ value: \"light\", label: \"Light\" });\r\n\t\t\tsetTheme('theme', { value: \"light\", label: \"Light\" });\r\n\t\t} else if (theme === \"light\") {\r\n\t\t\tchangeBackground({ value: \"dark\", label: \"Dark\" });\r\n\t\t\tsetTheme('theme', { value: \"dark\", label: \"Dark\" });\r\n\t\t} else {\r\n\t\t\tconsole.log('Error Occurred')\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif (id) {\r\n\t\t\taxios\r\n\t\t\t\t.get(`https://5000-imamabubakar-scalserver-k2k88lajzmw.ws-eu75.gitpod.io/api/user/${id}`)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsetImageData(res.data.profilePicture);\r\n\t\t\t\t\tsetNameData(res.data.name);\r\n\t\t\t\t\tsetRoleData(res.data.role);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log(err));\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<div className=\"header-content\">\r\n\t\t\t\t<nav className=\"navbar navbar-expand\">\r\n\t\t\t\t\t<div className=\"collapse navbar-collapse justify-content-between\">\r\n\t\t\t\t\t\t<div className=\"header-left\">\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"dashboard_bar\"\r\n\t\t\t\t\t\t\t\tstyle={{ textTransform: \"capitalize\" }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{finalName.join(\" \").length === 0\r\n\t\t\t\t\t\t\t\t\t? \"Dashboard\"\r\n\t\t\t\t\t\t\t\t\t: finalName.join(\" \") === \"dashboard dark\"\r\n\t\t\t\t\t\t\t\t\t\t? \"Dashboard\"\r\n\t\t\t\t\t\t\t\t\t\t: finalName.join(\" \")}\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<ul className=\"navbar-nav header-right main-notification\">\r\n\t\t\t\t\t\t\t{/* NOTIFICATION DROPDOWN */}\r\n\t\t\t\t\t\t\t<Dropdown as=\"li\" className=\"nav-item notification_dropdown \">\r\n\t\t\t\t\t\t\t\t<Dropdown.Toggle variant=\"\" as=\"a\" className=\"nav-link  ai-icon i-false c-pointer\">\r\n\t\t\t\t\t\t\t\t\t<svg width=\"20\" height=\"24\" viewBox=\"0 0 20 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t\t\t\t\t\t\t\t<path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M8.83333 3.91738V1.50004C8.83333 0.856041 9.356 0.333374 10 0.333374C10.6428 0.333374 11.1667 0.856041 11.1667 1.50004V3.91738C12.9003 4.16704 14.5208 4.97204 15.7738 6.22504C17.3057 7.75687 18.1667 9.8347 18.1667 12V16.3914L19.1105 18.279C19.562 19.1832 19.5142 20.2565 18.9822 21.1164C18.4513 21.9762 17.5122 22.5 16.5018 22.5H11.1667C11.1667 23.144 10.6428 23.6667 10 23.6667C9.356 23.6667 8.83333 23.144 8.83333 22.5H3.49817C2.48667 22.5 1.54752 21.9762 1.01669 21.1164C0.484686 20.2565 0.436843 19.1832 0.889509 18.279L1.83333 16.3914V12C1.83333 9.8347 2.69319 7.75687 4.22502 6.22504C5.47919 4.97204 7.0985 4.16704 8.83333 3.91738ZM10 6.1667C8.45183 6.1667 6.96902 6.78154 5.87469 7.87587C4.78035 8.96904 4.16666 10.453 4.16666 12V16.6667C4.16666 16.8475 4.12351 17.026 4.04301 17.1882C4.04301 17.1882 3.52384 18.2265 2.9755 19.322C2.88567 19.5029 2.89501 19.7187 3.00117 19.8902C3.10734 20.0617 3.29517 20.1667 3.49817 20.1667H16.5018C16.7037 20.1667 16.8915 20.0617 16.9977 19.8902C17.1038 19.7187 17.1132 19.5029 17.0234 19.322C16.475 18.2265 15.9558 17.1882 15.9558 17.1882C15.8753 17.026 15.8333 16.8475 15.8333 16.6667V12C15.8333 10.453 15.2185 8.96904 14.1242 7.87587C13.0298 6.78154 11.547 6.1667 10 6.1667Z\" fill=\"#a72b75\" />\r\n\t\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t\t\t{notification.length !== 0 ?\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"pulse-css\"></div>\r\n\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Dropdown.Toggle>\r\n\t\t\t\t\t\t\t\t<Dropdown.Menu align=\"right\" className=\"mt-4 dropdown-menu dropdown-menu-end\">\r\n\t\t\t\t\t\t\t\t\t<PerfectScrollbar className=\"widget-media dz-scroll p-3 height250\">\r\n\t\t\t\t\t\t\t\t\t\t<ul className=\"timeline\">\r\n\t\t\t\t\t\t\t\t\t\t\t{notification.length !== 0 ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{notification.map((result) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"timeline-panel\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"media-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"mb-1\">Analysis \"{result.name}\" has been completed</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<small className=\"d-block\">{result.time}</small>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"timeline-panel\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"media-body\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"mb-1\">No notifications at the moment</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"ps__rail-x\" style={{ left: 0, bottom: 0 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"ps__thumb-x\" tabIndex={0} style={{ left: 0, width: 0 }} />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"ps__rail-y\" style={{ top: 0, right: 0 }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"ps__thumb-y\" tabIndex={0} style={{ top: 0, height: 0 }} />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</PerfectScrollbar>\r\n\t\t\t\t\t\t\t\t</Dropdown.Menu>\r\n\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t{/* HISTORY DROPDOWN */}\r\n\t\t\t\t\t\t\t<Dropdown as=\"li\" className=\"nav-item dropdown notification_dropdown \">\r\n\t\t\t\t\t\t\t\t<Dropdown.Toggle className=\"nav-link i-false c-pointer ai-icon\" onClick={fixChange} variant=\"\" as=\"a\">\r\n\t\t\t\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\t\t\t\twidth=\"24\"\r\n\t\t\t\t\t\t\t\t\t\theight=\"24\"\r\n\t\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\r\n\t\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\t\t\t\t\t><path\r\n\t\t\t\t\t\t\t\t\t\t\td=\"M12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8V16Z\"\r\n\t\t\t\t\t\t\t\t\t\t\tfill=\"#a72b75\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t\t\t\t\tclip-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t\t\t\t\td=\"M12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM12 4V8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16V20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z\"\r\n\t\t\t\t\t\t\t\t\t\t\tfill=\"#a72b75\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t\t</Dropdown.Toggle>\r\n\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t{/*USER DROPDOWN*/}\r\n\t\t\t\t\t\t\t<Dropdown as=\"li\" className=\"nav-item dropdown header-profile\">\r\n\t\t\t\t\t\t\t\t<Dropdown.Toggle variant=\"\" as=\"a\" className=\"nav-link i-false c-pointer\">\r\n\t\t\t\t\t\t\t\t\t<img src={imageData} width={20} alt=\"User Image\" />\r\n\t\t\t\t\t\t\t\t\t<div className=\"header-info ms-3\">\r\n\t\t\t\t\t\t\t\t\t\t<span>{nameData}</span>\r\n\t\t\t\t\t\t\t\t\t\t<small>{roleData}</small>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Dropdown.Toggle>\r\n\r\n\t\t\t\t\t\t\t\t<Dropdown.Menu align=\"right\" className=\"mt-3 dropdown-menu dropdown-menu-end\">\r\n\t\t\t\t\t\t\t\t\t<Link to=\"/app-profile\" className=\"dropdown-item ai-icon\">\r\n\t\t\t\t\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"icon-user1\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-primary\"\r\n\t\t\t\t\t\t\t\t\t\t\twidth={18} height={18} viewBox=\"0 0 24 24\" fill=\"none\"\r\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<circle cx={12} cy={7} r={4} />\r\n\t\t\t\t\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"ms-2\">Profile </span>\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t<LogoutPage />\r\n\t\t\t\t\t\t\t\t</Dropdown.Menu>\r\n\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/NavHader.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/SideBar.js",["235"],"/// Menu\r\nimport Metismenu from \"metismenujs\";\r\nimport React, { Component, useContext, useEffect } from \"react\";\r\n/// Link\r\nimport { Link } from \"react-router-dom\";\r\nimport useScrollPosition from \"use-scroll-position\";\r\nimport { ThemeContext } from \"../../../context/ThemeContext\";\r\n\r\nclass MM extends Component {\r\n\t  componentDidMount() {\r\n\t\tthis.$el = this.el;\r\n\t\tthis.mm = new Metismenu(this.$el);\r\n\t  }\r\n\t  componentWillUnmount() {\r\n\t  }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"mm-wrapper\">\r\n\t\t\t\t<ul className=\"metismenu\" ref={(el) => (this.el = el)}>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst SideBar = () => {\r\n  const {\r\n    iconHover,\r\n    sidebarposition,\r\n    headerposition,\r\n    sidebarLayout,\r\n  } = useContext(ThemeContext);\r\n  useEffect(() => {\r\n    var btn = document.querySelector(\".nav-control\");\r\n    var aaa = document.querySelector(\"#main-wrapper\");\r\n    function toggleFunc() {\r\n      return aaa.classList.toggle(\"menu-toggle\");\r\n    }\r\n    btn.addEventListener(\"click\", toggleFunc);\r\n\t\r\n  }, []);\r\n  let scrollPosition = useScrollPosition();\r\n  /// Path\r\n  let path = window.location.pathname;\r\n  path = path.split(\"/\");\r\n  path = path[path.length - 1];\r\n  /// Active menu\r\n  let deshBoard = [\r\n      \"dashboard\"\r\n    ],\r\n    scan = [\"solidity-scan\"],\r\n    bytecode = [\"bytecode-scan\"],\r\n    tools = [\"tools\"],\r\n    about = [\"about\"],\r\n    history = [\"scan-history\"]\r\n  return (\r\n    <div\r\n      className={`deznav ${iconHover} ${\r\n        sidebarposition.value === \"fixed\" &&\r\n        sidebarLayout.value === \"horizontal\" &&\r\n        headerposition.value === \"static\"\r\n          ? scrollPosition > 120\r\n            ? \"fixed\"\r\n            : \"\"\r\n          : \"\"\r\n      }`}\r\n    >\r\n     \r\n        <MM className=\"metismenu\" id=\"menu\">\r\n          <li className={`${deshBoard.includes(path) ? \"mm-active\" : \"\"}`}>\r\n            <Link className=\"ai-icon\" to=\"dashboard\" >\r\n              <i className=\"flaticon-025-dashboard\"></i>\r\n              <span className=\"nav-text\">Dashboard</span>\r\n            </Link>\r\n          </li>\r\n          <li className={`${scan.includes(path) ? \"mm-active\" : \"\"}`}>\r\n            <Link className=\"ai-icon\" to=\"solidity-scan\" >\r\n              <i className=\"flaticon-381-file\"></i>\r\n              <span className=\"nav-text\">Scan Solidity</span>\r\n            </Link>\r\n          </li>\r\n         {/* <li className={`${bytecode.includes(path) ? \"mm-active\" : \"\"}`}>\r\n            <Link className=\"ai-icon\" to=\"bytecode-scan\" >\r\n              <i className=\"flaticon-381-file-1\"></i>\r\n              <span className=\"nav-text\">Scan Bytecode</span>\r\n            </Link>\r\n          </li> */} \r\n          <li className={`${history.includes(path) ? \"mm-active\" : \"\"}`}>\r\n            <Link className=\"ai-icon\" to=\"scan-history\" >\r\n              <i className=\"flaticon-088-time\"></i>\r\n              <span className=\"nav-text\">Scan History</span>\r\n            </Link>\r\n          </li>\r\n          <li className={`${tools.includes(path) ? \"mm-active\" : \"\"}`}>\r\n            <Link className=\"ai-icon\" to=\"tools\" >\r\n              <i className=\"flaticon-381-settings-3\"></i>\r\n              <span className=\"nav-text\">Tools</span>\r\n            </Link>\r\n          </li>\r\n          \r\n          <li className={`${about.includes(path) ? \"mm-active\" : \"\"} justify-items-end`}>\r\n            <Link className=\"ai-icon\" to=\"about\" >\r\n              <i className=\"flaticon-050-info\"></i>\r\n              <span className=\"nav-text\">About</span>\r\n            </Link>\r\n          </li>\r\n        </MM>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/AnalysisResult.js",["236","237","238","239","240","241","242","243","244","245","246","247"],"import { Row, Card } from \"react-bootstrap\";\n\nconst AnalysisResult = ({ props }) => {\n    const visible = 500;\n    console.log(props)\n    console.log(props.output)\n    return (\n        <>\n            {props.toolUsed == 'slither' ?\n                <div>\n                    {props.output.length === 0 ?\n                        <>\n                            <h4>Analysis Name: {props.analysisName}</h4>\n                            <h4>Tool Used: {props.toolUsed}</h4>\n                            <h4>Analysis Result: </h4>\n                            {/*Analysis result goes here */}\n                            <h4>\n                                No Vulnerabilities detected\n                            </h4>\n\n                        </>\n\n                        :\n                        <Row>\n                            <h4>Analysis Name: {props.analysisName}</h4>\n                            <h4>Tool Used: {props.toolUsed}</h4>\n                            <h4>Analysis Result: </h4>\n                            {/*Analysis result goes here */}\n                            {props.output?.slice(0, visible).map((analysis) => (\n                                <div className=\"col-xl-12\">\n                                    <Card>\n                                        <Card.Header className=\" border-0 pb-0\">\n                                            <Card.Title>{analysis.check}</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Card.Text>\n                                                {analysis.description.replaceAll(\"//workspace/scal-server/api/scal/toAnalyze/toAnalyze.sol\", \"Line \")}\n                                            </Card.Text>\n                                        </Card.Body>\n                                        <Card.Footer className=\" border-0 pt-0\">\n                                            <Card.Text className=\" d-inline\">Vulnerability Impact: {analysis.impact}</Card.Text>\n                                        </Card.Footer>\n                                    </Card>\n                                </div>\n                            ))}\n                        </Row>\n                    }\n                </div>\n                :\n                <>\n                    {props.toolUsed == 'manticore' ?\n                        <div>\n                            {props.output[0].length === 0 ?\n                                <>\n                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                    <h4>Analysis Result: </h4>\n                                    {/*Analysis result goes here */}\n                                    <h4>\n                                        No Vulnerabilities detected\n                                    </h4>\n\n                                </>\n                                :\n                                <Row>\n                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                    <h4>Analysis Result: </h4>\n                                    {/*Analysis result goes here */}\n                                    {props.output?.slice(0, visible).map((analysis) => (\n                                        <div className=\"col-xl-12\">\n                                            <Card>\n                                                <Card.Header className=\" border-0 pb-0\">\n                                                    <Card.Title>{analysis.error.name}</Card.Title>\n                                                </Card.Header>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        Code:\n                                                        {analysis.error.code}\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <Card.Footer className=\" border-0 pt-0\">\n                                                    <Card.Text className=\" d-inline\">At Line: {analysis.error.line}</Card.Text>\n                                                </Card.Footer>\n                                            </Card>\n                                        </div>\n                                    ))}\n                                </Row>\n                            }\n                        </div>\n                        :\n                        <>\n                            {props.toolUsed == 'solhint' ?\n                                <div>\n                                    {props.output.length === 0 ?\n                                        <>\n                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                            <h4>Analysis Result: </h4>\n                                            {/*Analysis result goes here */}\n                                            <h4>\n                                                No Vulnerabilities detected\n                                            </h4>\n\n                                        </>\n                                        :\n                                        <Row>\n                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                            <h4>Analysis Result: </h4>\n                                            {/*Analysis result goes here */}\n                                            {props.output?.slice(0, visible).map((analysis) => (\n                                                <div className=\"col-xl-12\">\n                                                    <Card>\n                                                        <Card.Body>\n                                                            <Card.Text>\n                                                                {analysis.message}\n                                                            </Card.Text>\n                                                        </Card.Body>\n                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                            <Card.Text className=\" d-inline\">At Line: {analysis.line}</Card.Text>\n                                                        </Card.Footer>\n                                                    </Card>\n                                                </div>\n                                            ))}\n                                        </Row>\n                                    }\n                                </div>\n                                :\n                                <>\n                                    {props.toolUsed == 'mythril' ?\n                                        <div>\n                                            {props.output[0].issues.length === 0 ?\n                                                <>\n                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                    <h4>Analysis Result: </h4>\n                                                    {/*Analysis result goes here */}\n                                                    <h4>\n                                                        No Vulnerabilities detected\n                                                    </h4>\n\n                                                </>\n                                                :\n                                                <Row>\n                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                    <h4>Analysis Result: </h4>\n                                                    {/*Analysis result goes here */}\n\n                                                    {props.output[0].issues?.slice(0, visible).map((issue) => (\n                                                        <div className=\"col-xl-12\">\n                                                            <Card>\n                                                                <Card.Header className=\" border-0 pb-0\">\n                                                                    <Card.Title>{issue.title}</Card.Title>\n                                                                </Card.Header>\n                                                                <Card.Body>\n                                                                    <Card.Text>\n                                                                        {issue.description}\n                                                                        <br />\n                                                                        <h5>Type: <i>{issue.type}</i></h5>\n\n                                                                    </Card.Text>\n                                                                </Card.Body>\n                                                                <Card.Footer className=\" border-0 pt-0\">\n                                                                    <Card.Text className=\" d-inline\">\n                                                                        <h5>\n                                                                            Code:\n                                                                            <i class=\"text-warning\"> {issue.code}</i> at line:\n                                                                            <i class=\"text-warning\"> {issue.lineno}</i>\n                                                                        </h5>\n                                                                    </Card.Text>\n                                                                </Card.Footer>\n                                                            </Card>\n                                                        </div>\n                                                    ))}\n                                                </Row>\n                                            }\n                                        </div>\n                                        :\n                                        <>\n                                            {props.toolUsed == 'oyente' ?\n                                                <div>\n                                                    {props.output.length === 0 || props.output[0].errors.length === 0 ?\n                                                        <>\n                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                            <h4>Analysis Result: </h4>\n                                                            {/*Analysis result goes here */}\n                                                            <h4>\n                                                                No Vulnerabilities detected\n                                                            </h4>\n\n                                                        </>\n                                                        :\n                                                        <>\n                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                            <h4>Analysis Result: </h4>\n                                                            {/*Analysis result goes here */}\n                                                            {props.output?.map((analysis) => (\n                                                                <Row>\n                                                                    {analysis.errors.map((display) => {\n                                                                        return (\n                                                                            <div className=\"col-xl-12\">\n                                                                                <Card>\n                                                                                    <Card.Body>\n                                                                                        <Card.Text>\n                                                                                            {display.message}\n                                                                                            <br />\n                                                                                            <h5>Type: <i>{display.level}</i></h5>\n                                                                                        </Card.Text>\n                                                                                    </Card.Body>\n                                                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                                                        <Card.Text className=\" d-inline\">\n                                                                                            At Line:\n                                                                                            <i className=\"text-warning\"> {display.line}</i>\n                                                                                        </Card.Text>\n                                                                                    </Card.Footer>\n                                                                                </Card>\n                                                                            </div>\n                                                                        );\n                                                                    })}\n                                                                </Row>\n                                                            ))}\n                                                        </>\n                                                    }\n                                                </div>\n                                                :\n                                                <>\n                                                    {props.toolUsed == 'smartcheck' ?\n                                                        <div>\n                                                            {props.output.length === 0 ?\n                                                                <>\n                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                    <h4>Analysis Result: </h4>\n                                                                    {/*Analysis result goes here */}\n                                                                    <h4>\n                                                                        No Vulnerabilities detected\n                                                                    </h4>\n\n                                                                </>\n                                                                :\n                                                                <Row>\n                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                    <h4>Analysis Result: </h4>\n                                                                    {/*Analysis result goes here */}\n                                                                    {props.output?.slice(0, visible).map((analysis) => (\n                                                                        <div className=\"col-xl-12\">\n                                                                            <Card>\n                                                                                <Card.Header className=\" border-0 pb-0\">\n                                                                                    <Card.Title>{analysis.name}</Card.Title>\n                                                                                </Card.Header>\n                                                                                <Card.Body>\n                                                                                    <Card.Text>\n                                                                                        {analysis.content}\n                                                                                    </Card.Text>\n                                                                                </Card.Body>\n                                                                                <Card.Footer className=\" border-0 pt-0\">\n                                                                                    <Card.Text className=\" d-inline\">At line: {analysis.line}</Card.Text>\n                                                                                </Card.Footer>\n                                                                            </Card>\n                                                                        </div>\n                                                                    ))}\n                                                                </Row>\n                                                            }\n                                                        </div>\n                                                        :\n                                                        <>\n                                                            {props.toolUsed == 'osiris' ?\n                                                                <div>\n                                                                    {props.output.length === 0 ?\n                                                                        <>\n                                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                                            <h4>Analysis Result: </h4>\n                                                                            {/*Analysis result goes here */}\n                                                                            <h4>\n                                                                                No Vulnerabilities detected\n                                                                            </h4>\n\n                                                                        </>\n                                                                        :\n                                                                        <>\n                                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                                            <h4>Analysis Result: </h4>\n                                                                            {/*Analysis result goes here */}\n                                                                            {props.output?.map((analysis) => (\n                                                                                <Row>\n                                                                                    {analysis.errors.map((display) => {\n                                                                                        return (\n                                                                                            <div className=\"col-xl-12\">\n                                                                                                <Card>\n                                                                                                    <Card.Body>\n                                                                                                        <Card.Text>\n                                                                                                            {display.message}\n                                                                                                        </Card.Text>\n                                                                                                    </Card.Body>\n                                                                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                                                                        <Card.Text className=\" d-inline\">\n                                                                                                            <p>\n                                                                                                                At Line:\n                                                                                                                <i className=\"text-warning\"> {display.line}</i>\n                                                                                                            </p>\n                                                                                                        </Card.Text>\n                                                                                                    </Card.Footer>\n                                                                                                </Card>\n                                                                                            </div>\n                                                                                        );\n                                                                                    })}\n                                                                                </Row>\n                                                                            ))}\n                                                                        </>\n                                                                    }\n                                                                </div>\n                                                                :\n                                                                <>\n                                                                    {props.toolUsed == 'honeybadger' ?\n                                                                        <div>\n                                                                            {props.output.length === 0 || props.output[0].errors.length === 0 ?\n                                                                                <>\n                                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                    <h4>Analysis Result: </h4>\n                                                                                    {/*Analysis result goes here */}\n                                                                                    <h4>\n                                                                                        No Vulnerabilities detected\n                                                                                    </h4>\n\n                                                                                </>\n                                                                                :\n                                                                                <>\n                                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                    <h4>Analysis Result: </h4>\n                                                                                    {/*Analysis result goes here */}\n                                                                                    {props.output?.map((analysis) => (\n                                                                                        <Row>\n                                                                                            {analysis.errors.map((display) => {\n                                                                                                return (\n                                                                                                    <div className=\"col-xl-12\">\n                                                                                                        <Card>\n                                                                                                            <Card.Body>\n                                                                                                                <Card.Text>\n                                                                                                                    {display.message}\n                                                                                                                    <br />\n                                                                                                                    <h5>Type: <i>{display.level}</i></h5>\n                                                                                                                </Card.Text>\n                                                                                                            </Card.Body>\n                                                                                                            <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                <Card.Text className=\" d-inline\">\n                                                                                                                    <h5>\n                                                                                                                        At Line:\n                                                                                                                        <i class=\"text-warning\"> {display.line}</i>\n                                                                                                                    </h5>\n                                                                                                                </Card.Text>\n                                                                                                            </Card.Footer>\n                                                                                                        </Card>\n                                                                                                    </div>\n                                                                                                );\n                                                                                            })}\n                                                                                        </Row>\n                                                                                    ))}\n                                                                                </>\n                                                                            }\n                                                                        </div>\n                                                                        :\n                                                                        <>\n                                                                            {props.toolUsed == 'maian' ?\n                                                                                <div>\n                                                                                    {!props.output[0].is_lock_vulnerable && !props.output[0].is_suicidal_vulnerable && !props.output[0].is_prodigal_vulnerable ?\n                                                                                        <>\n                                                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                            <h4>Analysis Result: </h4>\n                                                                                            {/*Analysis result goes here */}\n                                                                                            <h4>\n                                                                                                No Vulnerabilities detected\n                                                                                            </h4>\n\n                                                                                        </>\n                                                                                        :\n                                                                                        <Row>\n                                                                                            <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                            <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                            <h4>Analysis Result: </h4>\n                                                                                            {/*Analysis result goes here */}\n                                                                                            <div className=\"col-xl-12\">\n                                                                                                <Card>\n                                                                                                    {props.output[0].is_lock_vulnerable ?\n                                                                                                        <>\n                                                                                                            <Card.Header className=\" border-0 pb-0\">\n                                                                                                                <Card.Title>Lock Vulnerability</Card.Title>\n                                                                                                            </Card.Header>\n                                                                                                            <Card.Body>\n                                                                                                                <Card.Text>\n                                                                                                                    The smart contract has a payable function but misses out on the withdrawal function. It implies that there is only a payment option in the smart contract, and if you are a sender in case of a transaction, your funds are bound to get locked in your contract.\n                                                                                                                </Card.Text>\n                                                                                                            </Card.Body>\n                                                                                                            <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                            </Card.Footer>\n                                                                                                        </>\n                                                                                                        :\n                                                                                                        <> </>\n                                                                                                    }\n                                                                                                    {\n                                                                                                        props.output[0].is_prodigal_vulnerable ?\n                                                                                                            <>\n                                                                                                                <Card.Header className=\" border-0 pb-0\">\n                                                                                                                    <Card.Title>Prodigal Vulnerability</Card.Title>\n                                                                                                                </Card.Header>\n                                                                                                                <Card.Body>\n                                                                                                                    <Card.Text>\n                                                                                                                        The smart contract can send Ether to any address, without any restrictions\n                                                                                                                    </Card.Text>\n                                                                                                                </Card.Body>\n                                                                                                                <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                                </Card.Footer>\n                                                                                                            </>\n                                                                                                            :\n                                                                                                            <></>\n                                                                                                    }\n\n                                                                                                    {\n                                                                                                        props.output[0].is_suicidal_vulnerable ?\n                                                                                                            <>\n                                                                                                                <Card.Header className=\" border-0 pb-0\">\n                                                                                                                    <Card.Title>Suicidal Vulnerability</Card.Title>\n                                                                                                                </Card.Header>\n                                                                                                                <Card.Body>\n                                                                                                                    <Card.Text>\n                                                                                                                        The smart contract can be killed by anyone\n                                                                                                                    </Card.Text>\n                                                                                                                </Card.Body>\n                                                                                                                <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                    <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                                </Card.Footer>\n                                                                                                            </>\n                                                                                                            :\n                                                                                                            <></>\n                                                                                                    }\n                                                                                                </Card>\n\n\n                                                                                            </div>\n                                                                                        </Row>\n                                                                                    }\n                                                                                </div>\n                                                                                :\n                                                                                <>\n                                                                                    {props.toolUsed == 'securify' ?\n                                                                                        <div>\n                                                                                            {props.output === null || !props.output[0].toAnalyze.results.MissingInputValidation.hasViolations && !props.output[0].toAnalyze.results.DAOConstantGas.hasViolations && !props.output[0].toAnalyze.results.DAO.hasViolations && !props.output[0].toAnalyze.results.TODAmount.hasViolations && !props.output[0].toAnalyze.results.TODReceiver.hasViolations && !props.output[0].toAnalyze.results.TODTransfer.hasViolations && !props.output[0].toAnalyze.results.UnhandledException.hasViolations && !props.output[0].toAnalyze.results.UnrestrictedEtherFlow.hasViolations ?\n                                                                                                <>\n                                                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                                    <h4>Analysis Result: </h4>\n                                                                                                    {/*Analysis result goes here */}\n                                                                                                    <h4>\n                                                                                                        No Vulnerabilities detected\n                                                                                                    </h4>\n\n                                                                                                </>\n                                                                                                :\n                                                                                                <Row>\n                                                                                                    <h4>Analysis Name: {props.analysisName}</h4>\n                                                                                                    <h4>Tool Used: {props.toolUsed}</h4>\n                                                                                                    <h4>Analysis Result: </h4>\n                                                                                                    {/*Analysis result goes here */}\n                                                                                                    <div className=\"col-xl-12\">\n                                                                                                        <Card>\n                                                                                                            {props.output[0].toAnalyze.results.MissingInputValidation.hasViolations ?\n                                                                                                                <>\n                                                                                                                    <Card.Header className=\" border-0 pb-0\">\n                                                                                                                        <Card.Title>Missing Input Validation</Card.Title>\n                                                                                                                    </Card.Header>\n                                                                                                                    <Card.Body>\n                                                                                                                        <Card.Text>\n                                                                                                                            This vulnerability is raised when a contract function takes an argument which is assumed to satisfy some pre-conditions but do not check that these preconditions are met.\n                                                                                                                        </Card.Text>\n\n                                                                                                                    </Card.Body>\n                                                                                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                                    </Card.Footer>\n                                                                                                                </>\n                                                                                                                :\n                                                                                                                <></>\n                                                                                                            }{\n                                                                                                                props.output[0].toAnalyze.results.DAOConstantGas.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>DAO Constant Gas</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility where changes to state after executing an ether transfer may be vulnerable to a reentrancy attack. An example, a variable holding the remaining ethers held being updated only after sending Ethers. In most cases should be avoided using transfer() or send(), but a better practice is to utilise Checks-Effects-Interactions pattern\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <></>\n                                                                                                            }\n                                                                                                            {props.output[0].toAnalyze.results.DAO.hasViolations ?\n                                                                                                                <>\n                                                                                                                    <Card.Header className=\" border-0 pb-0\">\n                                                                                                                        <Card.Title>DAO</Card.Title>\n                                                                                                                    </Card.Header>\n                                                                                                                    <Card.Body>\n                                                                                                                        <Card.Text>\n                                                                                                                            Reports the possibility of reentrancy attacks (similar to the DAO case), and more precisely this pattern checks if all gas is forwarded. Could be avoided by using the transfer() or send() operations which forwards only 2300 gas stipend.\n                                                                                                                        </Card.Text>\n                                                                                                                    </Card.Body>\n                                                                                                                    <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                        <Card.Text className=\" d-inline\">Vulnerability Impact: High</Card.Text>\n                                                                                                                    </Card.Footer>\n                                                                                                                </>\n                                                                                                                :\n                                                                                                                <></>\n                                                                                                            }\n                                                                                                            {\n                                                                                                                props.output[0].toAnalyze.results.TODAmount.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>TOD Amount</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility where the amount of a transfer may be changed due to transaction ordering within a block. Similar to TODReceiver, but in this case, the amount being transferred may change. An example, during a crowdsale where the token multiplier * ethers received = tokens to send, where the token multipler is a variable which could be changed prior to the actual sending occurs.\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <></>\n                                                                                                            }\n                                                                                                            {\n                                                                                                                props.output[0].toAnalyze.results.TODReceiver.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>TOD Receiver</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility where the receiver of a transfer may be changed due to transaction ordering with a block. An example, if the intended recipient address is stored as a storage variable and a transfer is to execute based off this address, there is a chance the address may be changed or overwritten if there exists such a transaction prior to the transfer.\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <></>\n                                                                                                            }\n                                                                                                            {\n                                                                                                                props.output[0].toAnalyze.results.TODTransfer.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>TOD Transfer</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility where the order of a transfer may be changed due to transaction ordering with a block.\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Critical</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <></>\n                                                                                                            }\n                                                                                                            {\n                                                                                                                props.output[0].toAnalyze.results.UnhandledException.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>Unhandled Exception</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility of whereupon using call() or send(), the return value is not being handled. For example, if a send() operation takes place where the receiving contract runs a fallback function which results in an out of gas error, the send() operation would not revert, but instead return false. Unlike transfer(), which acts like require(send()) and would revert the entire transaction.\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <> </>\n                                                                                                            }\n                                                                                                            {\n                                                                                                                props.output[0].toAnalyze.results.UnrestrictedEtherFlow.hasViolations ?\n                                                                                                                    <>\n                                                                                                                        <Card.Header className=\" border-0 pb-0\">\n                                                                                                                            <Card.Title>Unrestricted Ether Flow</Card.Title>\n                                                                                                                        </Card.Header>\n                                                                                                                        <Card.Body>\n                                                                                                                            <Card.Text>\n                                                                                                                                Reports the possibility where issues may arise when the contract allows ether to be received indiscriminately, especially to prevent the possibility where Ethers may be locked up due to a missing transfer operation.\n                                                                                                                            </Card.Text>\n                                                                                                                        </Card.Body>\n                                                                                                                        <Card.Footer className=\" border-0 pt-0\">\n                                                                                                                            <Card.Text className=\" d-inline\">Vulnerability Impact: Medium</Card.Text>\n                                                                                                                        </Card.Footer>\n                                                                                                                    </>\n                                                                                                                    :\n                                                                                                                    <></>\n                                                                                                            }\n                                                                                                        </Card>\n\n                                                                                                    </div>\n                                                                                                </Row>\n                                                                                            }\n                                                                                        </div>\n                                                                                        :\n                                                                                        <h4>\n                                                                                            No Vulnerabilities detected\n                                                                                        </h4>\n                                                                                    }\n                                                                                </>\n                                                                            }\n                                                                        </>\n                                                                    }\n                                                                </>\n                                                            }\n                                                        </>\n                                                    }\n                                                </>\n                                            }\n                                        </>\n                                    }\n                                </>\n                            }\n                        </>\n                    }\n                </>\n            }\n        </>\n    )\n}\n\nexport default AnalysisResult;","/Users/abubakardev/Desktop/scal/client/src/jsx/components/Dashboard/ScanHistory/TagRender.js",["248"],"const TagRender = ({ value }) => {\n    const newValue = parseInt(value.noOfVulns);\n\n    return (\n        <>\n            {newValue == 0 ?\n                <span className=\"badge badge-success\">\n                    Safe\n                    <span className=\"ms-1 fa fa-check\" />\n                </span>\n\n                :\n                <>\n                    {newValue > 0 && newValue <= 3 ?\n                        <span className=\"badge badge-warning\">\n                            Informational\n                            <span className=\"ms-1 fas fa-stream\" />\n                        </span>\n                        :\n                        <>\n                            {newValue > 3 && newValue <= 8 ?\n                                <span className=\"badge badge-default\">\n                                    Low\n                                    <span className=\"ms-1 fa fa-redo\" />\n                                </span>\n                                :\n                                <>\n                                    {newValue > 8 && newValue <= 15\n                                        ?\n                                        <span className=\"badge badge-primary\">\n                                            Medium\n                                            <span className=\"ms-1 fa fa-redo\" />\n                                        </span>\n                                        :\n                                        <>\n                                            {newValue > 15 && newValue <= 30\n                                                ?\n                                                <span className=\"badge badge-dark\">\n                                                    High\n                                                    <span className=\"ms-1 fa fa-redo\" />\n                                                </span>\n                                                :\n                                                <>\n                                                    {newValue > 30\n                                                        ?\n\n                                                        <span className=\"badge badge-danger\">\n                                                            Critical\n                                                            <span className=\"ms-1 fa fa-ban\" />\n                                                        </span>\n                                                        :\n                                                        <></>\n                                                    }\n                                                </>\n                                            }\n                                        </>\n                                    }\n                                </>\n\n                            }\n\n                        </>\n\n                    }\n\n                </>\n\n            }\n        </>\n    );\n}\n\nexport default TagRender;","/Users/abubakardev/Desktop/scal/client/src/jsx/layouts/nav/Logout.js",[],"/Users/abubakardev/Desktop/scal/client/src/context/NotificationContext.js",[],"/Users/abubakardev/Desktop/scal/client/src/jsx/pages/ResetPassword.js",[],{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":40,"column":21,"nodeType":"255","endLine":40,"endColumn":55},{"ruleId":"256","severity":1,"message":"257","line":9,"column":9,"nodeType":"258","messageId":"259","endLine":9,"endColumn":14},{"ruleId":"256","severity":1,"message":"260","line":1,"column":29,"nodeType":"258","messageId":"259","endLine":1,"endColumn":38},{"ruleId":"256","severity":1,"message":"261","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":14},{"ruleId":"253","severity":1,"message":"262","line":25,"column":8,"nodeType":"263","endLine":25,"endColumn":10,"suggestions":"264"},{"ruleId":"256","severity":1,"message":"265","line":1,"column":17,"nodeType":"258","messageId":"259","endLine":1,"endColumn":27},{"ruleId":"256","severity":1,"message":"266","line":1,"column":50,"nodeType":"258","messageId":"259","endLine":1,"endColumn":56},{"ruleId":"256","severity":1,"message":"267","line":5,"column":18,"nodeType":"258","messageId":"259","endLine":5,"endColumn":25},{"ruleId":"256","severity":1,"message":"268","line":17,"column":21,"nodeType":"258","messageId":"259","endLine":17,"endColumn":33},{"ruleId":"256","severity":1,"message":"269","line":38,"column":15,"nodeType":"258","messageId":"259","endLine":38,"endColumn":27},{"ruleId":"253","severity":1,"message":"270","line":50,"column":6,"nodeType":"263","endLine":50,"endColumn":8,"suggestions":"271"},{"ruleId":"256","severity":1,"message":"272","line":54,"column":9,"nodeType":"258","messageId":"259","endLine":54,"endColumn":20},{"ruleId":"256","severity":1,"message":"273","line":17,"column":16,"nodeType":"258","messageId":"259","endLine":17,"endColumn":24},{"ruleId":"253","severity":1,"message":"262","line":45,"column":5,"nodeType":"263","endLine":45,"endColumn":7,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":49,"column":22,"nodeType":"277","messageId":"278","endLine":49,"endColumn":24},{"ruleId":"275","severity":1,"message":"276","line":52,"column":21,"nodeType":"277","messageId":"278","endLine":52,"endColumn":23},{"ruleId":"275","severity":1,"message":"276","line":55,"column":20,"nodeType":"277","messageId":"278","endLine":55,"endColumn":22},{"ruleId":"256","severity":1,"message":"279","line":4,"column":8,"nodeType":"258","messageId":"259","endLine":4,"endColumn":20},{"ruleId":"253","severity":1,"message":"280","line":8,"column":18,"nodeType":"258","endLine":8,"endColumn":29},{"ruleId":"281","severity":1,"message":"282","line":38,"column":11,"nodeType":"283","endLine":38,"endColumn":41},{"ruleId":"256","severity":1,"message":"261","line":2,"column":10,"nodeType":"258","messageId":"259","endLine":2,"endColumn":14},{"ruleId":"256","severity":1,"message":"284","line":3,"column":10,"nodeType":"258","messageId":"259","endLine":3,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":11,"column":23,"nodeType":"277","messageId":"278","endLine":11,"endColumn":25},{"ruleId":"256","severity":1,"message":"261","line":7,"column":10,"nodeType":"258","messageId":"259","endLine":7,"endColumn":14},{"ruleId":"256","severity":1,"message":"285","line":10,"column":10,"nodeType":"258","messageId":"259","endLine":10,"endColumn":13},{"ruleId":"286","severity":1,"message":"287","line":73,"column":37,"nodeType":"288","messageId":"289","endLine":73,"endColumn":39},{"ruleId":"286","severity":1,"message":"290","line":206,"column":52,"nodeType":"288","messageId":"291","endLine":206,"endColumn":54},{"ruleId":"292","severity":1,"message":"293","line":207,"column":9,"nodeType":"294","messageId":"295","endLine":207,"endColumn":41},{"ruleId":"296","severity":1,"message":"297","line":557,"column":46,"nodeType":"298","messageId":"299","endLine":557,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":557,"column":108,"nodeType":"298","messageId":"299","endLine":557,"endColumn":110},{"ruleId":"286","severity":1,"message":"287","line":90,"column":37,"nodeType":"288","messageId":"289","endLine":90,"endColumn":39},{"ruleId":"286","severity":1,"message":"290","line":229,"column":51,"nodeType":"288","messageId":"291","endLine":229,"endColumn":53},{"ruleId":"292","severity":1,"message":"293","line":230,"column":9,"nodeType":"294","messageId":"295","endLine":230,"endColumn":41},{"ruleId":"296","severity":1,"message":"297","line":580,"column":46,"nodeType":"298","messageId":"299","endLine":580,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":580,"column":108,"nodeType":"298","messageId":"299","endLine":580,"endColumn":110},{"ruleId":"253","severity":1,"message":"262","line":74,"column":5,"nodeType":"263","endLine":74,"endColumn":7,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":169,"column":10,"nodeType":"283","endLine":169,"endColumn":61},{"ruleId":"256","severity":1,"message":"303","line":53,"column":5,"nodeType":"258","messageId":"259","endLine":53,"endColumn":13},{"ruleId":"275","severity":1,"message":"276","line":9,"column":29,"nodeType":"277","messageId":"278","endLine":9,"endColumn":31},{"ruleId":"275","severity":1,"message":"276","line":51,"column":37,"nodeType":"277","messageId":"278","endLine":51,"endColumn":39},{"ruleId":"275","severity":1,"message":"276","line":93,"column":45,"nodeType":"277","messageId":"278","endLine":93,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":131,"column":53,"nodeType":"277","messageId":"278","endLine":131,"endColumn":55},{"ruleId":"275","severity":1,"message":"276","line":182,"column":61,"nodeType":"277","messageId":"278","endLine":182,"endColumn":63},{"ruleId":"275","severity":1,"message":"276","line":231,"column":69,"nodeType":"277","messageId":"278","endLine":231,"endColumn":71},{"ruleId":"275","severity":1,"message":"276","line":272,"column":77,"nodeType":"277","messageId":"278","endLine":272,"endColumn":79},{"ruleId":"275","severity":1,"message":"276","line":321,"column":85,"nodeType":"277","messageId":"278","endLine":321,"endColumn":87},{"ruleId":"275","severity":1,"message":"276","line":372,"column":93,"nodeType":"277","messageId":"278","endLine":372,"endColumn":95},{"ruleId":"275","severity":1,"message":"276","line":456,"column":101,"nodeType":"277","messageId":"278","endLine":456,"endColumn":103},{"ruleId":"296","severity":1,"message":"297","line":458,"column":116,"nodeType":"298","messageId":"299","endLine":458,"endColumn":118},{"ruleId":"296","severity":1,"message":"297","line":458,"column":575,"nodeType":"298","messageId":"299","endLine":458,"endColumn":577},{"ruleId":"275","severity":1,"message":"276","line":6,"column":23,"nodeType":"277","messageId":"278","endLine":6,"endColumn":25},"no-native-reassign",["304"],"no-negated-in-lhs",["305"],"react-hooks/exhaustive-deps","Assignments to the 'theme' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["306"],"'useContext' is defined but never used.","'useRef' is defined but never used.","'isTheme' is defined but never used.","'setTotalByte' is assigned a value but never used.","'newDataArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'graphData' and 'id'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLastVuln' needs the current value of 'graphData'.",["307"],"'chackboxFun' is assigned a value but never used.","'setEmail' is assigned a value but never used.",["308"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TestAnalysis' is defined but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Dropdown' is defined but never used.","'set' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator",["309"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'bytecode' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"310","fix":"314"},{"desc":"310","fix":"315"},"Update the dependencies array to be: [id]",{"range":"316","text":"317"},"Update the dependencies array to be: [graphData, id]",{"range":"318","text":"319"},{"range":"320","text":"317"},{"range":"321","text":"317"},[725,727],"[id]",[1560,1562],"[graphData, id]",[1351,1353],[2645,2647]]